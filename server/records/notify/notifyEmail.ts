import * as NET from 'net';
import { NotifyPackage, NotifyType, getMessagePrefixByType } from './notifyShared';
import * as UTIL from '../utils/utils';
import { RateManager, RateManagerConfig, RateManagerResult } from '../utils/rateManager';

/**
 * - get error/success messages out allowing caller to wait for results
 * - test routines
 */

// declaring this empty for branding/clarity since it is used
// for instances that are not related to the RateManager
// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface EmailResult extends RateManagerResult {}

interface EmailEntry {
    type: NotifyType,
    sendTo: string[],
    subject: string,
    textBody: string,
    htmlBody?: string
}

export class NotifyEmail {
    private static rateManager: RateManager<EmailEntry> | null =  null;
    private static environment: 'prod' | 'dev' = 'dev';

    public static isActive(): boolean {
        // we're initialized if we have a logger running
        return (NotifyEmail.rateManager!=null && NotifyEmail.rateManager.isActive());
    }
    public static configure(env: 'prod' | 'dev', targetRate?: number, burstRate?: number, burstThreshold?: number): EmailResult {
        // we allow for re-assigning configuration options even if already running
        NotifyEmail.environment = env;

        // if we want a rate limiter then we build it
        const rmConfig: RateManagerConfig<EmailEntry> = {
            targetRate: targetRate ?? 1,
            burstRate: burstRate ?? 5,
            burstThreshold: burstThreshold ?? 25,
            onPost: NotifyEmail.postMessage,
        };

        // if we already have a manager we re-configure it (causes restart). otherwise, we create a new one
        if(NotifyEmail.rateManager)
            NotifyEmail.rateManager.setConfig(rmConfig);
        else {
            NotifyEmail.rateManager = new RateManager<EmailEntry>(rmConfig);
        }

        // if we already configured skip creating another one
        if(NotifyEmail.isActive()===true)
            return { success: true, message: 'email system already running' };

        // start our rate manager if needed
        if(NotifyEmail.rateManager)
            NotifyEmail.rateManager.startRateManager();

        return { success: true, message: `(${NotifyEmail.environment}) configured email notifier.` };
    }

    //#region UTILS
    private static storeServerResponse(response: string): { statusCode: number, message: string}[] {

        // see if we need to split it
        const pieces: string[] = response.split('\n');

        // split it up as needed
        const result: { statusCode: number, message: string}[] = pieces.map(line => {
            const firstSpaceIndex = line.indexOf(' ');

            // Extract status code (everything before the first space)
            const statusCode = line.substring(0, firstSpaceIndex);

            // Extract message (everything after the first space)
            const message = line.substring(firstSpaceIndex + 1).trim();

            return {
                statusCode: parseInt(statusCode),
                message
            };
        }).filter(item => !isNaN(item.statusCode) && item.message.length > 0); // Filter out invalid entries
        return result;
    }
    private static verifyServerResponses(responses): boolean {
        // first should always be 220 saying we connected to the server
        if(responses[0].statusCode!=220)
            return false;

        // next we check to see if the next one is a 250, accepting the command
        if(responses[1].statusCode!=250)
            return false;

        // finally, see if the connect closed with code 221
        if(responses[responses.length-1].statusCode!=221)
            return false;

        return true;
    }
    private static extractErrorFromResponse(responses): string {
        const errorMessages = responses
            .filter(item => item.statusCode >= 400 && item.statusCode < 600)
            .map(item => item.message);

        return errorMessages.join(' | ');
    }
    //#endregion

    //#region FORMATING
    private static getMessageIconBase64(type: NotifyType): string {

        // pre-converted base64 strings for each icon type
        switch(type) {
            case NotifyType.SYSTEM_ERROR:
                return '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';
            case NotifyType.SYSTEM_NOTICE:
                return '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';

            case NotifyType.JOB_FAILED:
                return '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';
            case NotifyType.JOB_PASSED:
                return 'iVBORw0KGgoAAAANSUhEUgAAAJYAAACWCAYAAAA8AXHiAAAAAXNSR0IArs4c6QAACyJJREFUeF7tnQEO3TQMhruTACcBTgKcBDgJcBLgJMBJYL80o6xKUtuNU//vudK0SUtTx/5iO076+uGoqzQQoIEPAX1Wl6WBo8AqCEI0UGCFqLU6LbCKgRANFFghaq1OC6xiIEQDBVaIWqvTAqsYCNFAgRWi1uq0wCoGQjRQYIWotTotsIqBEA0UWCFqrU4LrGIgRAMFVohaq9MCqxgI0UCBFaLW6rTAKgZCNFBghai1Oi2wioEQDRRYIWqtTgssGwM/Hsfx23Ecf9tue7/WBZbO5l8ex/H7cRz4G1D9ehzHz7pb37NVgXVtd3ipnzrNANi35b36CnxHsL7/6H2+/gjFn8dx/DEBA97pl49tvpmwd+W90Aeu7z55ux+uOX6NFu8GFiBBSGsvwCGACWwjLzWyOu4XaAARLjzrDCVC6FvA9W5gAaqZB4p2F4AYYAHEl77eCSyrF4oyPOD6KqrzLP2+C1i9EPikDbAYeOlV5buA9XQIPEP88iHxHcDKEgJ7cL1sSHxFsLDExx+UFPA3ygtZr3Y1KqvTrLKa5HoFsJA/AaLe8t6kjASNAZf8uaqzJRB3LAI7WPBGKGJGXrIvKAbHs8QrSgE06vnwaKju010F1ucmE3hgUO2qTSCT6vrKOhltaYIdLHirFTkUlv8Seu56B4AGyCDXXY9WYN21hvP+v24aD0BFHYNZBRhCIV2lnt1j/esEUvb2dpyrEsB6JyQ04hdYGi0tbOOtplsMJaFM8qgvPu71/fNpDO0KTjOs9kyXpr20oazSM3ss64pQW+0WD6MtX0j9CTkaTi/MLo/3olwZMoNlSdw1xllRoRfIsKKchVnLsygTeFawLIa5OgOFvlas4FpPJQcAZwsDeC8sPjSXHIXekRNq5LlswwaW5lRnO+iZp7L2danMToOrE6aWcH7Vl0e+sHuYwLJ4KShsFkK8ib/XELME3DqunSta73gpPnni9Syj1Z/FS7gV27lx5D0940vvvbJ7LC8EI6h2e6ozXyMv6i1FpE3ss4NlDRMw5ChZfxoqgWylfAWWM6Z4YOh5K8sKzCmq6bZRzmU96Xq14jUJtbJxdo9lBWKkaKvBVuq419eoWGudSHjj56ooGz2Wbv/ZwYLQFihw1Pdc6/HmadEGGSXzd8cbLbeq/1cCa+St7p6AUCnS2agXti1eK6390grWGEqbwPfCQlZvJcMbeS3NqQ3NNpWT9/u3MYClncG9sWT2VmK9ntfShMO0iTsGxgCWJoHvKTm7txKweitEzWRKm7izgKUJhYxhUMDq1aI0kyltDYsBLM3MxTh6q0FNOLmfTKzpwRsO0x4CzB4KtXD0xqFJgNdgcb+XHiCa82baw4v3JTT2kBksTQiU4Z7HoQklRlWFNu+BpR1/ypCYFSxtCIS1e4q13B9KjLLz3uJDCxYekW6FmBUsS5mAeUU4q2dZVrXpQmJGsDS5ResIXhUsq9dNFRIzgmXNj3oVaMtsV0ar0GYrxpCqrpURLFjQAkbPKNbZHkqNovO7Xjfd9k5WsGALbanhFZL3O6vCUR1PwXNck8xgaUOit3Idp1V7z70wps01LW922yVz3pEZLEtIZK+8e+VPFwJHhUUnn6G3aWZub9Za6kChA1B07t056AGpeFx8k+weCxrQhETmBN6buKdaBZ5RZQBLs8JjzrO8+VXaDWhAxgCWtvTAGA5HRU3NzkPa/IoFLE2ONdov04TR+IRj/ISet9LKnKrSzhgKNbMX4xopWuvxdgM2klc7kVLWr5hWhZZzVb1E2Pv6ejRod9/QgXwpa1gModDqbeAFel891SwAokFq+1/1Ym3aBD578m4Fa5RrWYqt0YCNkm4P/GkT+OxgeYqcI68FYDz9rQRtlnBr90ZbeQosp3U8PwY7S+S9/TnF/+y22WE8D/BpoWLIscQynh8nmx3X9RjyDlwzCKwhMP2PrjGBJUa1AjFLbq0G9YI1A9wqQ2ov1Sooe47VMya8l/zSscbYM7giQ+PVOXRLGeSqL40etrZhBEsUpE12NaHDCuvMSHgefud99rtV2uo6U73xM52wgYXQIR8sWhkW21wOX+7SfpVC7hN4NV8Qs5ZQ2vCHe+WrrFs9kPVhTGBJPiLVZmt+IqvFXgF1FHLl24P4gisu+bYOQJIfeLN8Pcw6GfDMNkfD9pb8HLfV1lvbM4EloU82bq3h5OxdtB+6XGEQz6pWnttuVMv2VtqtHLbY3c70NhnXblD34NDkXnehWpG7ySnR1kOnPtnAUm44h7w259Am8HeTbStgK4CSZwpY59ws3Wv1bOWGMzztbPXkLCNI0C+gRQIu/9YCBZDwB7mY94OXo2dJunI+TpO6BJE9xxqBcyeB18IiCbr8LR/AxP34IKYk8wBq5QfGW/nOibssHtp8ER4t3ZUZrFlyLmBJyIk07hNGE4+JFaeUV0bn0lIenckM1ix/mn3wqA1L2YGTkoUUU0d1sFntK2VIzAqWpogIY7QzeuRZVuZhq73Xlf61W07pVolXA1utSE1/1vpUmwv1Em/LnpxGvlVtzrWo1tNaK/+QKVVIzAjWqhKCHPiD0j1V+lUA9fppQ/kq2WYHHCPH0u07G1irlCyDbavWlrdfog3RvhpveVnkSq40x2qygXWnkt5TejuLs4TENgSu8M7ncad49T4TWFEe5Xw6AM85X5KnSYHUWuiUozLoF/eOVqMRIbA3Fu1G+5UHdP9/FrBWh8DZLJZDglhVoug5OjelXU2OtlZ6yXgbAld753bMj2/3ZAErUslQuDexnZ1KuFM/igiB58n06AmIDGBpPYPbLX+60ZvY9mpJ3r4giqZGd3esMpke2+55GqzoENjLPwCF7LlhVmsv8V6433KWSxYNuA/jPe/3aZ/vafdYSHwarB0hYWSQnb+G99Q474RrD8j/3/MkWLtCYE9Bu6vU1t2EW0Y93fzIds9TYL2doh9+vX/3RHrsF/2eCg2YzE+tlp4s0G4PiU94rF2rol44ubOaWxGedi9WWpm3hsTdYD0ZAqHknQn7CMQnvfW2kLgbrLdQ6oVre3JyeQvFZm+9E6y3CQMKKzy5It6SDuwEK3rbZmbPpxL2kUxPJvKQKfwExC6w7oRAuO871eotM1Thpc5N7npwqeQ7Hu3eO1U/awdYFgWOXi64EzoyJOwRiTxsJyco5J1Gy8sjods9O8AahUDtGyowigXO1ojbVkHqqfx5Q28iP4PCAltYihANlngaC0Q9G3kMsLVu4wQLt3m8sTVHGsEWpqMdYGl+M0pjF2ueFjYbNcIa2ngS+RXhXWCT07MGka+bRoN1LYG+haVinzVhH43WEupDcyO9OeYtmcCyhMMVM3qVjrX9aD2yNQxqn7+0HRNYGLhG+dkT9lltCwudq4ti0rCBdZXohiWjV9Ze9P9X48NjKGxGIWRjtKtchCVhn3kteOVRQZgiv6Khv7HCLM9iS9g9iTxFfsUI1izPosg9lCFzlEvSjJEtFMIuvbIDa8JuSeRpwiCrxzqHQ/aEfQTXOZGnmjyMHuscDtkTdm0iTxMGWT0W5JbZ/CoJuyaRp3ICVMJ2yg5Us1iZuJ+bIZGXt2ycXey/jRUs+T0Fy6vu+7W75olyxmr2NbE1T1rYCytYC1VQXUVooMCK0Gr1ybHvVHbi00B5LD6bUUhcYFGYiU/IAovPZhQSF1gUZuITssDisxmFxAUWhZn4hCyw+GxGIXGBRWEmPiELLD6bUUhcYFGYiU/IAovPZhQSF1gUZuITssDisxmFxAUWhZn4hCyw+GxGIXGBRWEmPiELLD6bUUhcYFGYiU/IAovPZhQS/weONI61BwUr5QAAAABJRU5ErkJggg==';
            case NotifyType.JOB_STARTED:
                return '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';

            case NotifyType.SECURITY_NOTICE:
                return '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';

            default:
                return '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';
        }
    }
    private static formatTextBody(params: NotifyPackage): string {
        const msgPrefix: string = getMessagePrefixByType(params.type);
        const startDate: Date = params.startDate;
        const duration: string | undefined = (params.endDate) ? UTIL.getDurationString(params.startDate,params.endDate) : undefined;

        let result: string = `${msgPrefix.toUpperCase()}\n${params.message}\n`;
        result +=  (params.detailsMessage) ? '\n'+params.detailsMessage : '';
        result += `\n\nStarted: ${UTIL.getFormattedDate(startDate)}`;
        result += (duration) ? '\nDuration: '+duration : '';
        result += '\nWho: '+(params.sendTo?.join(', ') ?? 'NA');
        result += (params.detailsLink) ? `\n${UTIL.toTitleCase(params.detailsLink.label)}: ${params.detailsLink.url}` : '';

        return result;
    }
    private static formatHtmlBody(params: NotifyPackage): string {

        const msgPrefix: string = getMessagePrefixByType(params.type);
        const startDate: Date = params.startDate;
        const duration: string | undefined = (params.endDate) ? UTIL.getDurationString(params.startDate,params.endDate) : undefined;

        let result: string = '';
        result += '<!DOCTYPE html><html lang="en">';

        // head
        result += '<head>';
        result += '<meta charset="UTF-8">';
        result += '<meta name="viewport" content="width=device-width, initial-scale=1.0">';
        result += `<title>[${msgPrefix}] ${params.message}</title>`;
        result += '</head>';

        // body
        result += '<body style="font-family: Arial, sans-serif; padding: 20px; background-color: #f4f4f4;">';
        result +=   '<div style="max-width: 600px; margin: 0 auto; background-color: #ffffff; padding: 20px; border-radius: 10px;">';

        // banner
        result += '<div style="text-align: center; margin-bottom: 20px;">';
        result +=   '<img src="cid:0123456789" style="max-width: 100%; height: auto; border-radius: 5px;">'; // image references specific attachment by CID
        result += '</div>';

        // header and subtitle
        result +=   `<h1 style="text-align: center; color: #333;">[${msgPrefix}]</h1>`;
        result +=   `<h2 style="text-align: center; color: #777;">${params.message}</h2>`;

        // details paragraph
        if(params.detailsMessage) {
            result += '<p style="text-align: left; color: #555; font-size: 16px; line-height: 1.5;">';
            result +=   params.detailsMessage;
            result += '</p>';
        }
        result += '<p style="text-align: left; color: #555; font-size: 16px; line-height: 1.5; margin:0;">';
        result +=   `<strong>Started</strong>: ${UTIL.getFormattedDate(startDate)}`;
        result += '</p>';
        if(duration) {
            result += '<p style="text-align: left; color: #555; font-size: 16px; line-height: 1.5; margin:0;">';
            result +=   `<strong>Duration</strong>: ${duration}`;
            result += '</p>';
        }
        result += '<p style="text-align: left; color: #555; font-size: 16px; line-height: 1.5; margin:0;">';
        result +=   `<strong>Who</strong>: ${params.sendTo?.join(', ') ?? 'NA'}`;
        result += '</p>';

        // more info button
        if(params.detailsLink) {
            result += '<div style="display: flex; justify-content: center; margin-top: 20px;">';
            result +=   `<a href="${params.detailsLink.url}" style="text-decoration: none; background-color: #007bff; color: white; padding: 12px 25px; border-radius: 5px; font-size: 16px; font-weight: bold; text-align: center; display: inline-block;">`;
            result +=       UTIL.toTitleCase(params.detailsLink.label);
            result +=   '</a>';
            result += '</div>';
        }

        // close body
        result +=   '</div>';
        result += '</body>';

        // close html
        result += '</html>';

        return result;
    }
    //#endregion

    //#region PUBLIC
    private static async postMessage(entry: EmailEntry): Promise<EmailResult> {

        // get our SMTP parameters from config
        // NOTE: currently unencrypted and insecure. do not send anything sensitive!
        const smtpHost: string = 'smtp.si.edu';
        const smtpPort: number = 25;

        const from: string = 'maslowskiec@si.edu';
        const boundary: string = '----=_Packrat_Ops_Msg_001';

        return new Promise((resolve) => {
            const serverResponses: { statusCode: number, message: string}[] = [];
            const client = NET.createConnection(smtpPort,smtpHost, () => {
                // SMTP dialog
                client.write('HELO si.edu\r\n');
                client.write(`MAIL FROM:<${from}>\r\n`);
                for(const recipient of entry.sendTo)
                    client.write(`RCPT TO:<${recipient}>\r\n`);
                client.write('DATA\r\n');

                // MIME email body with plain text and HTML parts
                client.write(`From: ${from}\r\n`);
                client.write(`To: ${entry.sendTo.join(', ')}\r\n`);
                client.write(`Subject: ${UTIL.truncateString(entry.subject,60)}\r\n`);
                client.write('MIME-Version: 1.0\r\n');
                client.write(`Content-Type: multipart/alternative; boundary="${boundary}"\r\n`);
                client.write('\r\n');

                // Plain-text part
                client.write(`--${boundary}\r\n`);
                client.write('Content-Type: text/plain; charset="UTF-8"\r\n');
                client.write('Content-Transfer-Encoding: 7bit\r\n');
                client.write('\r\n');
                client.write(`${entry.textBody}\r\n`);

                // HTML part
                if(entry.htmlBody) {
                    client.write(`--${boundary}\r\n`);
                    client.write('Content-Type: text/html; charset="UTF-8"\r\n');
                    client.write('Content-Transfer-Encoding: 7bit\r\n');
                    client.write('\r\n');
                    client.write(`${entry.htmlBody}\r\n`);
                }

                // attachments
                // NOTE: we need to put all images as attachments and then reference by CID
                // for compatability since GMail removes any base64 embedded images
                client.write(`--${boundary}\r\n`);
                client.write('Content-Type: image/png; name="header.png"\r\n');
                client.write('Content-Disposition: inline; filename="header.png"\r\n');
                client.write('Content-Transfer-Encoding: base64\r\n');
                client.write('Content-ID: <0123456789>\r\n');
                client.write('Content-Location: header.png\r\n');
                client.write('\r\n');

                // add our base64 icon from the type
                const base64Icon: string = NotifyEmail.getMessageIconBase64(entry.type);
                client.write(`${base64Icon}\r\n`);

                // End of message
                client.write(`--${boundary}--\r\n`);
                client.write('.\r\n');
                client.write('QUIT\r\n');
            });

            client.on('data', (data) => {
                // get our data and make sure it's not an error
                const response = data.toString();
                serverResponses.push(...NotifyEmail.storeServerResponse(response));

                // see if we have an errors in the mix
                const errors = NotifyEmail.extractErrorFromResponse(serverResponses);

                // Handle server responses
                if (errors.length > 0) {
                    resolve({
                        success: false,
                        message: 'failed to send email.',
                        data: { error: errors }
                    });
                }
            });

            client.on('end', () => {
                // console.log('Connection closed.');
                // go through our responses and see if it makes sense
                if(NotifyEmail.verifyServerResponses(serverResponses)===true)
                    resolve({ success: true, message: 'email sent' });
                else
                    resolve({ success: false, message: 'failed to send email', data: { error: NotifyEmail.extractErrorFromResponse(serverResponses) } });
            });

            client.on('error', (err) => {
                // console.error('Error:', err);
                resolve({
                    success: false,
                    message: 'failed to send email.',
                    data: { error: UTIL.getErrorString(err) }
                });
            });
        });
    }
    public static async sendMessageRaw(type: NotifyType, sendTo: string[], subject: string, textBody: string, htmlBody?: string): Promise<EmailResult> {

        // get our email addresses if needed
        if(sendTo.length<=0)
            return { success: false, message: 'failed to send message', data: { error: 'no addresses provided' } };

        const entry: EmailEntry = {
            type,
            sendTo,
            subject,
            textBody,
            htmlBody
        };

        if(NotifyEmail.rateManager && NotifyEmail.rateManager.isActive()===true)
            NotifyEmail.rateManager.add(entry);

        return { success: true, message: 'added message to be sent' };
    }
    public static async sendMessage(params: NotifyPackage): Promise<EmailResult> {

        // if we have sendTo address(es) then we ignore the channel
        if(!params.sendTo)
            return { success: false, message: 'failed to send message', data: { error: 'no email address provided.' } };

        // build our text and html bodies
        const textBody: string = NotifyEmail.formatTextBody(params);
        const htmlBody: string = NotifyEmail.formatHtmlBody(params);

        try {
            const subject: string = `[Packrat:${getMessagePrefixByType(params.type)}] ${params.message}`;
            return await NotifyEmail.sendMessageRaw(params.type,params.sendTo,subject,textBody,htmlBody);
        } catch (error) {
            return { success: false, message: 'failed to send message', data: { error: UTIL.getErrorString(error) } };
        }
    }
    //#endregion
}