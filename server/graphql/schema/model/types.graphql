# import Vocabulary from "../vocabulary/types.graphql"
# import Asset from "../asset/types.graphql"
# import Actor from "../scene/types.graphql"

scalar DateTime

type Model {
  id: ID!
  dateCreated: DateTime
  vCreationMethod: Vocabulary
  master: Boolean!
  authoritative: Boolean!
  vModality: Vocabulary
  vUnits: Vocabulary
  vPurpose: Vocabulary
  assetThumbnail: Asset
  orientation: Orientation
}

type Orientation {
  ts0: Float
  ts1: Float
  ts2: Float
  r0: Float
  r1: Float
  r2: Float
  r3: Float
}

type ModelGeometryFile {
  id: ID!
  model: Model
  asset: Asset
  vModelFileType: Vocabulary
  roughness: Float
  metalness: Float
  pointCount: Int
  faceCount: Int
  isWatertight: Boolean
  hasNormals: Boolean
  hasVertexColor: Boolean
  hasUvSpace: Boolean
  boundingBoxP1X: Float
  boundingBoxP1Y: Float
  boundingBoxP1Z: Float
  boundingBoxP2X: Float
  boundingBoxP2Y: Float
  boundingBoxP2Z: Float
}

type ModelProcessingAction {
  id: ID!
  model: Model
  actor: Actor
  processingDate: DateTime
  toolsUsed: String
  description: String
  modelProcessingActionSteps: [ModelProcessingActionStep]
}

type ModelProcessingActionStep {
  id: ID!
  modelProcessingAction: ModelProcessingAction
  vActionMethod: Vocabulary
  description: String!
}

type ModelUVMapFile {
  id: ID!
  modelGeometryFile: ModelGeometryFile
  asset: Asset
  uVMapEdgeLength: Int!
  modelUVMapChannel: [ModelUVMapChannel]
}

type ModelUVMapChannel {
  id: ID!
  modelUvMapFile: ModelUVMapFile
  channelPosition: Int!
  channelWidth: Int!
  vUVMapType: Vocabulary
}
