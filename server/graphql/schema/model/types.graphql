# import Vocabulary from "../vocabulary/types.graphql"
# import Asset from "../asset/types.graphql"
# import Actor from "../scene/types.graphql"

scalar DateTime

type Model {
  idModel: ID!
  DateCreated: DateTime!
  VCreationMethod: Vocabulary!
  Master: Boolean!
  Authoritative: Boolean!
  VModality: Vocabulary!
  VUnits: Vocabulary!
  VPurpose: Vocabulary!
  AssetThumbnail: Asset
  Orientation: Orientation
}

type Orientation {
  TS0: Float
  TS1: Float
  TS2: Float
  R0: Float
  R1: Float
  R2: Float
  R3: Float
}

type ModelGeometryFile {
  idModelGeometryFile: ID!
  Model: Model!
  Asset: Asset!
  VModelFileType: Vocabulary!
  Roughness: Float
  Metalness: Float
  PointCount: Int
  FaceCount: Int
  IsWatertight: Boolean
  HasNormals: Boolean
  HasVertexColor: Boolean
  HasUvSpace: Boolean
  BoundingBoxP1X: Float
  BoundingBoxP1Y: Float
  BoundingBoxP1Z: Float
  BoundingBoxP2X: Float
  BoundingBoxP2Y: Float
  BoundingBoxP2Z: Float
}

type ModelProcessingAction {
  idModelProcessingAction: ID!
  Model: Model!
  Actor: Actor!
  DateProcessed: DateTime!
  ToolsUsed: String!
  Description: String!
  ModelProcessingActionStep: [ModelProcessingActionStep]
}

type ModelProcessingActionStep {
  idModelProcessingActionStep: ID!
  ModelProcessingAction: ModelProcessingAction!
  VActionMethod: Vocabulary!
  Description: String!
}

type ModelUVMapFile {
  idModelUVMapFile: ID!
  ModelGeometryFile: ModelGeometryFile!
  Asset: Asset!
  UVMapEdgeLength: Int!
  ModelUVMapChannel: [ModelUVMapChannel]
}

type ModelUVMapChannel {
  idModelUVMapChannel: ID!
  ModelUvMapFile: ModelUVMapFile!
  ChannelPosition: Int!
  ChannelWidth: Int!
  VUVMapType: Vocabulary!
}
