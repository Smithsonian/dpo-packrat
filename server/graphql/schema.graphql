type Query {
  areCameraSettingsUniform(input: AreCameraSettingsUniformInput!): AreCameraSettingsUniformResult!
  getAccessPolicy(input: GetAccessPolicyInput!): GetAccessPolicyResult!
  getAsset(input: GetAssetInput!): GetAssetResult!
  getAssetDetailsForSystemObject(input: GetAssetDetailsForSystemObjectInput!): GetAssetDetailsForSystemObjectResult!
  getAssetVersionsDetails(input: GetAssetVersionsDetailsInput!): GetAssetVersionsDetailsResult!
  getCaptureData(input: GetCaptureDataInput!): GetCaptureDataResult!
  getCaptureDataPhoto(input: GetCaptureDataPhotoInput!): GetCaptureDataPhotoResult!
  getContentsForAssetVersions(input: GetContentsForAssetVersionsInput!): GetContentsForAssetVersionsResult!
  getCurrentUser: GetCurrentUserResult!
  getDetailsTabDataForObject(input: GetDetailsTabDataForObjectInput!): GetDetailsTabDataForObjectResult!
  getIngestionItemsForSubjects(input: GetIngestionItemsForSubjectsInput!): GetIngestionItemsForSubjectsResult!
  getIngestionProjectsForSubjects(input: GetIngestionProjectsForSubjectsInput!): GetIngestionProjectsForSubjectsResult!
  getIntermediaryFile(input: GetIntermediaryFileInput!): GetIntermediaryFileResult!
  getItem(input: GetItemInput!): GetItemResult!
  getItemsForSubject(input: GetItemsForSubjectInput!): GetItemsForSubjectResult!
  getLicense(input: GetLicenseInput!): GetLicenseResult!
  getModel(input: GetModelInput!): GetModelResult!
  getObjectChildren(input: GetObjectChildrenInput!): GetObjectChildrenResult!
  getObjectsForItem(input: GetObjectsForItemInput!): GetObjectsForItemResult!
  getProject(input: GetProjectInput!): GetProjectResult!
  getProjectDocumentation(input: GetProjectDocumentationInput!): GetProjectDocumentationResult!
  getScene(input: GetSceneInput!): GetSceneResult!
  getSourceObjectIdentifer(input: GetSourceObjectIdentiferInput!): GetSourceObjectIdentiferResult!
  getSubject(input: GetSubjectInput!): GetSubjectResult!
  getSubjectsForUnit(input: GetSubjectsForUnitInput!): GetSubjectsForUnitResult!
  getSystemObjectDetails(input: GetSystemObjectDetailsInput!): GetSystemObjectDetailsResult!
  getUnit(input: GetUnitInput!): GetUnitResult!
  getUploadedAssetVersion: GetUploadedAssetVersionResult!
  getUser(input: GetUserInput!): GetUserResult!
  getVersionsForSystemObject(input: GetVersionsForSystemObjectInput!): GetVersionsForSystemObjectResult!
  getVocabulary(input: GetVocabularyInput!): GetVocabularyResult!
  getVocabularyEntries(input: GetVocabularyEntriesInput!): GetVocabularyEntriesResult!
  getWorkflow(input: GetWorkflowInput!): GetWorkflowResult!
  searchIngestionSubjects(input: SearchIngestionSubjectsInput!): SearchIngestionSubjectsResult!
}

input GetAccessPolicyInput {
  idAccessPolicy: Int!
}

type GetAccessPolicyResult {
  AccessPolicy: AccessPolicy
}

scalar DateTime

type AccessAction {
  idAccessAction: Int!
  Name: String!
  SortOrder: Int!
  AccessRole: [AccessRole]
}

type AccessContext {
  idAccessContext: Int!
  Authoritative: Boolean!
  CaptureData: Boolean!
  Global: Boolean!
  IntermediaryFile: Boolean!
  Model: Boolean!
  Scene: Boolean!
  AccessContextObject: [AccessContextObject]
  AccessPolicy: [AccessPolicy]
}

type AccessContextObject {
  idAccessContextObject: Int!
  idAccessContext: Int!
  idSystemObject: Int!
  AccessContext: AccessContext
  SystemObject: SystemObject
}

type AccessPolicy {
  idAccessPolicy: Int!
  idAccessContext: Int!
  idAccessRole: Int!
  idUser: Int!
  AccessContext: AccessContext
  AccessRole: AccessRole
  User: User
}

type AccessRole {
  idAccessRole: Int!
  Name: String!
  AccessAction: [AccessAction]
}

scalar Upload

type Mutation {
  createCaptureData(input: CreateCaptureDataInput!): CreateCaptureDataResult!
  createCaptureDataPhoto(input: CreateCaptureDataPhotoInput!): CreateCaptureDataPhotoResult!
  createItem(input: CreateItemInput!): CreateItemResult!
  createModel(input: CreateModelInput!): CreateModelResult!
  createProject(input: CreateProjectInput!): CreateProjectResult!
  createScene(input: CreateSceneInput!): CreateSceneResult!
  createSubject(input: CreateSubjectInput!): CreateSubjectResult!
  createUnit(input: CreateUnitInput!): CreateUnitResult!
  createUser(input: CreateUserInput!): CreateUserResult!
  createVocabulary(input: CreateVocabularyInput!): CreateVocabularyResult!
  createVocabularySet(input: CreateVocabularySetInput!): CreateVocabularySetResult!
  discardUploadedAssetVersions(input: DiscardUploadedAssetVersionsInput!): DiscardUploadedAssetVersionsResult!
  ingestData(input: IngestDataInput!): IngestDataResult!
  uploadAsset(file: Upload!, type: Int!): UploadAssetResult!
}

type UploadAssetInput {
  file: Upload!
  type: Int!
}

enum UploadStatus {
  COMPLETE
  FAILED
}

type UploadAssetResult {
  status: UploadStatus!
  idAssetVersions: [Int!]
  error: String
}

input DiscardUploadedAssetVersionsInput {
  idAssetVersions: [Int!]!
}

type DiscardUploadedAssetVersionsResult {
  success: Boolean!
}

input GetAssetVersionsDetailsInput {
  idAssetVersions: [Int!]!
}

type IngestIdentifier {
  identifier: String!
  identifierType: Int!
}

type IngestFolder {
  name: String!
  variantType: Int!
}

type IngestPhotogrammetry {
  idAssetVersion: Int!
  dateCaptured: String!
  datasetType: Int!
  systemCreated: Boolean!
  description: String!
  cameraSettingUniform: Boolean!
  datasetFieldId: Int
  itemPositionType: Int
  itemPositionFieldId: Int
  itemArrangementFieldId: Int
  focusType: Int
  lightsourceType: Int
  backgroundRemovalMethod: Int
  clusterType: Int
  clusterGeometryFieldId: Int
  directory: String!
  folders: [IngestFolder!]!
  identifiers: [IngestIdentifier!]!
}

type IngestUVMap {
  name: String!
  mapType: Int!
}

enum RelatedObjectType {
  Source
  Derived
}

type RelatedObject {
  idSystemObject: Int!
  name: String!
  identifier: String
  objectType: Int!
}

type IngestModel {
  idAssetVersion: Int!
  systemCreated: Boolean!
  master: Boolean!
  authoritative: Boolean!
  creationMethod: Int!
  modality: Int!
  purpose: Int!
  units: Int!
  dateCaptured: String!
  modelFileType: Int!
  directory: String!
  identifiers: [IngestIdentifier!]!
  uvMaps: [IngestUVMap!]!
  sourceObjects: [RelatedObject!]!
  roughness: Int
  metalness: Int
  pointCount: Int
  faceCount: Int
  isWatertight: Boolean
  hasNormals: Boolean
  hasVertexColor: Boolean
  hasUVSpace: Boolean
  boundingBoxP1X: Float
  boundingBoxP1Y: Float
  boundingBoxP1Z: Float
  boundingBoxP2X: Float
  boundingBoxP2Y: Float
  boundingBoxP2Z: Float
}

enum ReferenceModelAction {
  Update
  Ingest
}

type ReferenceModel {
  idSystemObject: Int!
  name: String!
  fileSize: Int!
  resolution: Int
  boundingBoxP1X: Float
  boundingBoxP1Y: Float
  boundingBoxP1Z: Float
  boundingBoxP2X: Float
  boundingBoxP2Y: Float
  boundingBoxP2Z: Float
  action: ReferenceModelAction!
}

type IngestScene {
  idAssetVersion: Int!
  systemCreated: Boolean!
  identifiers: [IngestIdentifier!]!
  referenceModels: [ReferenceModel!]!
}

type GetAssetVersionDetailResult {
  idAssetVersion: Int!
  SubjectUnitIdentifier: SubjectUnitIdentifier
  Project: [Project!]
  Item: Item
  CaptureDataPhoto: IngestPhotogrammetry
  Model: IngestModel
  Scene: IngestScene
}

type GetAssetVersionsDetailsResult {
  valid: Boolean!
  Details: [GetAssetVersionDetailResult!]!
}

input GetAssetInput {
  idAsset: Int!
}

type GetAssetResult {
  Asset: Asset
}

type GetUploadedAssetVersionResult {
  AssetVersion: [AssetVersion!]!
}

input GetContentsForAssetVersionsInput {
  idAssetVersions: [Int!]!
}

type AssetVersionContent {
  idAssetVersion: Int!
  folders: [String!]!
  all: [String!]!
}

type GetContentsForAssetVersionsResult {
  AssetVersionContent: [AssetVersionContent!]!
}

type Asset {
  idAsset: Int!
  FileName: String!
  FilePath: String!
  idAssetGroup: Int
  idSystemObject: Int
  StorageKey: String
  AssetGroup: AssetGroup
  SystemObjectSource: SystemObject
  AssetVersion: [AssetVersion]
  VAssetType: Vocabulary
  SystemObject: SystemObject
}

type AssetVersion {
  idAssetVersion: Int!
  DateCreated: DateTime!
  idAsset: Int!
  idUserCreator: Int!
  StorageHash: String!
  StorageSize: Int!
  StorageKeyStaging: String!
  FileName: String!
  Ingested: Boolean!
  Version: Int!
  Asset: Asset
  User: User
  SystemObject: SystemObject
}

type AssetGroup {
  idAssetGroup: Int!
  Asset: [Asset]
}

input CreateCaptureDataInput {
  idVCaptureMethod: Int!
  DateCaptured: DateTime!
  Description: String!
  idAssetThumbnail: Int
}

type CreateCaptureDataResult {
  CaptureData: CaptureData
}

input CreateCaptureDataPhotoInput {
  idCaptureData: Int!
  idVCaptureDatasetType: Int!
  CaptureDatasetFieldID: Int!
  ItemPositionFieldID: Int!
  ItemArrangementFieldID: Int!
  idVBackgroundRemovalMethod: Int!
  ClusterGeometryFieldID: Int!
  CameraSettingsUniform: Boolean!
  idVItemPositionType: Int
  idVFocusType: Int
  idVLightSourceType: Int
  idVClusterType: Int
}

type CreateCaptureDataPhotoResult {
  CaptureDataPhoto: CaptureDataPhoto
}

input GetCaptureDataInput {
  idCaptureData: Int!
}

type GetCaptureDataResult {
  CaptureData: CaptureData
}

input GetCaptureDataPhotoInput {
  idCaptureDataPhoto: Int!
}

type GetCaptureDataPhotoResult {
  CaptureDataPhoto: CaptureDataPhoto
}

type CaptureData {
  idCaptureData: Int!
  DateCaptured: DateTime!
  Description: String!
  idVCaptureMethod: Int!
  idAssetThumbnail: Int
  AssetThumbnail: Asset
  VCaptureMethod: Vocabulary
  CaptureDataFile: [CaptureDataFile]
  CaptureDataGroup: [CaptureDataGroup]
  SystemObject: SystemObject
}

type CaptureDataFile {
  idCaptureDataFile: Int!
  CompressedMultipleFiles: Boolean!
  idAsset: Int!
  idCaptureData: Int!
  idVVariantType: Int!
  Asset: Asset
  CaptureData: CaptureData
  VVariantType: Vocabulary
}

type CaptureDataGroup {
  idCaptureDataGroup: Int!
  CaptureData: [CaptureData]
}

type CaptureDataPhoto {
  idCaptureDataPhoto: Int!
  idCaptureData: Int!
  idVCaptureDatasetType: Int!
  CameraSettingsUniform: Boolean
  CaptureDatasetFieldID: Int
  ClusterGeometryFieldID: Int
  idVBackgroundRemovalMethod: Int
  idVClusterType: Int
  idVFocusType: Int
  idVItemPositionType: Int
  idVLightSourceType: Int
  ItemArrangementFieldID: Int
  ItemPositionFieldID: Int
  CaptureData: CaptureData
  VBackgroundRemovalMethod: Vocabulary
  VCaptureDatasetType: Vocabulary
  VClusterType: Vocabulary
  VFocusType: Vocabulary
  VItemPositionType: Vocabulary
  VLightSourceType: Vocabulary
}

input IngestSubjectInput {
  id: Int
  name: String!
  arkId: String!
  unit: String!
}

input IngestProjectInput {
  id: Int!
  name: String!
}

input IngestItemInput {
  id: Int
  name: String!
  entireSubject: Boolean!
}

input IngestIdentifierInput {
  identifier: String!
  identifierType: Int!
}

input IngestFolderInput {
  name: String!
  variantType: Int!
}

input IngestPhotogrammetryInput {
  idAssetVersion: Int!
  dateCaptured: String!
  datasetType: Int!
  systemCreated: Boolean!
  description: String!
  cameraSettingUniform: Boolean!
  datasetFieldId: Int
  itemPositionType: Int
  itemPositionFieldId: Int
  itemArrangementFieldId: Int
  focusType: Int
  lightsourceType: Int
  backgroundRemovalMethod: Int
  clusterType: Int
  clusterGeometryFieldId: Int
  directory: String!
  folders: [IngestFolderInput!]!
  identifiers: [IngestIdentifierInput!]!
}

input IngestUVMapInput {
  name: String!
  mapType: Int!
}

input RelatedObjectInput {
  idSystemObject: Int!
  name: String!
  identifier: String
  objectType: Int!
}

input IngestModelInput {
  idAssetVersion: Int!
  systemCreated: Boolean!
  master: Boolean!
  authoritative: Boolean!
  creationMethod: Int!
  modality: Int!
  purpose: Int!
  units: Int!
  dateCaptured: String!
  modelFileType: Int!
  directory: String!
  identifiers: [IngestIdentifierInput!]!
  uvMaps: [IngestUVMapInput!]!
  sourceObjects: [RelatedObjectInput!]!
  roughness: Int
  metalness: Int
  pointCount: Int
  faceCount: Int
  isWatertight: Boolean
  hasNormals: Boolean
  hasVertexColor: Boolean
  hasUVSpace: Boolean
  boundingBoxP1X: Float
  boundingBoxP1Y: Float
  boundingBoxP1Z: Float
  boundingBoxP2X: Float
  boundingBoxP2Y: Float
  boundingBoxP2Z: Float
}

input ReferenceModelInput {
  idSystemObject: Int!
  name: String!
  fileSize: Int!
  resolution: Int
  boundingBoxP1X: Float
  boundingBoxP1Y: Float
  boundingBoxP1Z: Float
  boundingBoxP2X: Float
  boundingBoxP2Y: Float
  boundingBoxP2Z: Float
  action: ReferenceModelAction!
}

input IngestSceneInput {
  idAssetVersion: Int!
  systemCreated: Boolean!
  identifiers: [IngestIdentifierInput!]!
  referenceModels: [ReferenceModelInput!]!
}

input IngestOtherInput {
  idAssetVersion: Int!
  systemCreated: Boolean!
  identifiers: [IngestIdentifierInput!]!
}

input IngestDataInput {
  subjects: [IngestSubjectInput!]!
  project: IngestProjectInput!
  item: IngestItemInput!
  photogrammetry: [IngestPhotogrammetryInput!]!
  model: [IngestModelInput!]!
  scene: [IngestSceneInput!]!
  other: [IngestOtherInput!]!
}

type IngestDataResult {
  success: Boolean!
}

input AreCameraSettingsUniformInput {
  idAssetVersion: Int!
}

type AreCameraSettingsUniformResult {
  isUniform: Boolean!
}

input GetLicenseInput {
  idLicense: Int!
}

type GetLicenseResult {
  License: License
}

type License {
  idLicense: Int!
  Description: String!
  Name: String!
  LicenseAssignment: [LicenseAssignment]
}

type LicenseAssignment {
  idLicenseAssignment: Int!
  idLicense: Int!
  DateEnd: DateTime
  DateStart: DateTime
  idSystemObject: Int
  idUserCreator: Int
  License: License
  SystemObject: SystemObject
  UserCreator: User
}

input CreateModelInput {
  Authoritative: Boolean!
  idVCreationMethod: Int!
  idVModality: Int!
  idVPurpose: Int!
  idVUnits: Int!
  Master: Boolean!
  idAssetThumbnail: Int
}

type CreateModelResult {
  Model: Model
}

input GetModelInput {
  idModel: Int!
}

type GetModelResult {
  Model: Model
}

type Model {
  idModel: Int!
  Authoritative: Boolean!
  DateCreated: DateTime!
  idAssetThumbnail: Int
  idVCreationMethod: Int!
  idVModality: Int!
  idVPurpose: Int!
  idVUnits: Int!
  Master: Boolean!
  AssetThumbnail: Asset
  VCreationMethod: Vocabulary
  VModality: Vocabulary
  VPurpose: Vocabulary
  VUnits: Vocabulary
  ModelGeometryFile: [ModelGeometryFile]
  ModelProcessingAction: [ModelProcessingAction]
  ModelSceneXref: [ModelSceneXref]
  SystemObject: SystemObject
}

type ModelGeometryFile {
  idModelGeometryFile: Int!
  idAsset: Int!
  idModel: Int!
  idVModelFileType: Int!
  BoundingBoxP1X: Float
  BoundingBoxP1Y: Float
  BoundingBoxP1Z: Float
  BoundingBoxP2X: Float
  BoundingBoxP2Y: Float
  BoundingBoxP2Z: Float
  FaceCount: Int
  HasNormals: Boolean
  HasUVSpace: Boolean
  HasVertexColor: Boolean
  IsWatertight: Boolean
  Metalness: Float
  PointCount: Int
  Roughness: Float
  Asset: Asset
  Model: Model
  VModelFileType: Vocabulary
  ModelUVMapFile: [ModelUVMapFile]
}

type ModelProcessingAction {
  idModelProcessingAction: Int!
  DateProcessed: DateTime!
  Description: String!
  idActor: Int!
  idModel: Int!
  ToolsUsed: String!
  Actor: Actor
  Model: Model
  ModelProcessingActionStep: [ModelProcessingActionStep]!
}

type ModelProcessingActionStep {
  idModelProcessingActionStep: Int!
  Description: String!
  idModelProcessingAction: Int!
  idVActionMethod: Int!
  ModelProcessingAction: ModelProcessingAction
  VActionMethod: Vocabulary
}

type ModelSceneXref {
  idModelSceneXref: Int!
  idModel: Int!
  idScene: Int!
  R0: Float
  R1: Float
  R2: Float
  R3: Float
  TS0: Float
  TS1: Float
  TS2: Float
  Model: Model
  Scene: Scene
}

type ModelUVMapChannel {
  idModelUVMapChannel: Int!
  ChannelPosition: Int!
  ChannelWidth: Int!
  idModelUVMapFile: Int!
  idVUVMapType: Int!
  ModelUVMapFile: ModelUVMapFile
  VUVMapType: Vocabulary
}

type ModelUVMapFile {
  idModelUVMapFile: Int!
  idAsset: Int!
  idModelGeometryFile: Int!
  UVMapEdgeLength: Int!
  Asset: Asset
  ModelGeometryFile: ModelGeometryFile
  ModelUVMapChannel: [ModelUVMapChannel]
}

input PaginationInput {
  first: Int
  skip: Int
  offset: Int
  size: Int
}

input GetObjectChildrenInput {
  idRoot: Int!
  objectTypes: [Int!]!
  metadataColumns: [Int!]!
}

type NavigationResultEntry {
  idSystemObject: Int!
  name: String!
  objectType: Int!
  idObject: Int!
  metadata: [String!]!
}

type GetObjectChildrenResult {
  success: Boolean!
  error: String!
  entries: [NavigationResultEntry!]!
  metadataColumns: [Int!]!
}

input CreateSceneInput {
  Name: String!
  HasBeenQCd: Boolean!
  IsOriented: Boolean!
  idAssetThumbnail: Int
}

type CreateSceneResult {
  Scene: Scene
}

input GetSceneInput {
  idScene: Int!
}

type GetSceneResult {
  Scene: Scene
}

input GetIntermediaryFileInput {
  idIntermediaryFile: Int!
}

type GetIntermediaryFileResult {
  IntermediaryFile: IntermediaryFile
}

type Scene {
  idScene: Int!
  HasBeenQCd: Boolean!
  idAssetThumbnail: Int
  IsOriented: Boolean!
  Name: String!
  AssetThumbnail: Asset
  ModelSceneXref: [ModelSceneXref]
  SystemObject: SystemObject
}

type Actor {
  idActor: Int!
  idUnit: Int
  IndividualName: String
  OrganizationName: String
  Unit: Unit
  SystemObject: SystemObject
}

type IntermediaryFile {
  idIntermediaryFile: Int!
  DateCreated: DateTime!
  idAsset: Int!
  Asset: Asset
  SystemObject: SystemObject
}

input GetDetailsTabDataForObjectInput {
  idSystemObject: Int!
  objectType: Int!
}

type GetDetailsTabDataForObjectResult {
  Unit: Unit
  Project: Project
  Subject: Subject
  Item: Item
  CaptureData: IngestPhotogrammetry
  Model: IngestModel
  Scene: Scene
  IntermediaryFile: IntermediaryFile
  ProjectDocumentation: ProjectDocumentation
  Asset: Asset
  AssetVersion: AssetVersion
  Actor: Actor
  Stakeholder: Stakeholder
}

input GetSystemObjectDetailsInput {
  idSystemObject: Int!
}

type RepositoryPath {
  idSystemObject: Int!
  name: String!
  objectType: Int!
}

type GetSystemObjectDetailsResult {
  name: String!
  retired: Boolean!
  objectType: Int!
  allowed: Boolean!
  publishedState: String!
  thumbnail: String
  identifiers: [IngestIdentifier!]!
  objectAncestors: [[RepositoryPath!]!]!
  sourceObjects: [RelatedObject!]!
  derivedObjects: [RelatedObject!]!
  unit: RepositoryPath
  project: RepositoryPath
  subject: RepositoryPath
  item: RepositoryPath
}

input GetSourceObjectIdentiferInput {
  idSystemObjects: [Int!]!
}

type SourceObjectIdentifier {
  idSystemObject: Int!
  identifier: String
}

type GetSourceObjectIdentiferResult {
  sourceObjectIdentifiers: [SourceObjectIdentifier!]!
}

type AssetDetail {
  idSystemObject: Int!
  name: String!
  path: String!
  assetType: Int!
  version: Int!
  dateCreated: DateTime!
  size: Int!
}

input GetAssetDetailsForSystemObjectInput {
  idSystemObject: Int!
}

type GetAssetDetailsForSystemObjectResult {
  assetDetails: [AssetDetail!]!
}

type DetailVersion {
  idSystemObject: Int!
  version: Int!
  name: String!
  creator: String!
  dateCreated: DateTime!
  size: Int!
}

input GetVersionsForSystemObjectInput {
  idSystemObject: Int!
}

type GetVersionsForSystemObjectResult {
  versions: [DetailVersion!]!
}

type SystemObject {
  idSystemObject: Int!
  Retired: Boolean!
  idActor: Int
  idAsset: Int
  idAssetVersion: Int
  idCaptureData: Int
  idIntermediaryFile: Int
  idItem: Int
  idModel: Int
  idProject: Int
  idProjectDocumentation: Int
  idScene: Int
  idStakeholder: Int
  idSubject: Int
  idUnit: Int
  idWorkflow: Int
  idWorkflowStep: Int
  Actor: Actor
  Asset: Asset
  AssetVersion: AssetVersion
  CaptureData: CaptureData
  IntermediaryFile: IntermediaryFile
  Item: Item
  Model: Model
  Project: Project
  ProjectDocumentation: ProjectDocumentation
  Scene: Scene
  Stakeholder: Stakeholder
  Subject: Subject
  Unit: Unit
  Workflow: Workflow
  WorkflowStep: WorkflowStep
  AccessContextObject: [AccessContextObject]
  Identifier: [Identifier]
  LicenseAssignment: [LicenseAssignment]
  Metadata: [Metadata]
  SystemObjectVersion: [SystemObjectVersion]
  SystemObjectDerived: [SystemObject]
  SystemObjectMaster: [SystemObject]
  UserPersonalizationSystemObject: [UserPersonalizationSystemObject]
  WorkflowStepXref: [WorkflowStep]
}

type SystemObjectVersion {
  idSystemObjectVersion: Int!
  idSystemObject: Int!
  PublishedState: Int!
  SystemObject: SystemObject
}

type Identifier {
  idIdentifier: Int!
  IdentifierValue: String!
  idSystemObject: Int
  idVIdentifierType: Int
  SystemObject: SystemObject
  VIdentifierType: Vocabulary
}

type Metadata {
  idMetadata: Int!
  Name: String!
  idAssetValue: Int
  idSystemObject: Int
  idUser: Int
  idVMetadataSource: Int
  ValueExtended: String
  ValueShort: String
  AssetValue: Asset
  SystemObject: SystemObject
  User: User
  VMetadataSource: Vocabulary
}

input CreateUnitInput {
  Name: String!
  Abbreviation: String!
  ARKPrefix: String!
}

type CreateUnitResult {
  Unit: Unit
}

input CreateProjectInput {
  Name: String!
  Description: String!
}

type CreateProjectResult {
  Project: Project
}

input CreateSubjectInput {
  idUnit: Int!
  Name: String!
  idAssetThumbnail: Int
  idGeoLocation: Int
  idIdentifierPreferred: Int
}

type CreateSubjectResult {
  Subject: Subject
}

input CreateItemInput {
  Name: String!
  EntireSubject: Boolean!
  idAssetThumbnail: Int
  idGeoLocation: Int
}

type CreateItemResult {
  Item: Item
}

input GetSubjectsForUnitInput {
  idUnit: Int!
  pagination: PaginationInput = {}
}

type GetSubjectsForUnitResult {
  Subject: [Subject!]!
}

input GetItemsForSubjectInput {
  idSubject: Int!
  pagination: PaginationInput = {}
}

type GetItemsForSubjectResult {
  Item: [Item!]!
}

type SubjectUnitIdentifier {
  idSubject: Int!
  SubjectName: String!
  UnitAbbreviation: String!
  IdentifierPublic: String
  IdentifierCollection: String
}

input GetObjectsForItemInput {
  idItem: Int!
}

type GetObjectsForItemResult {
  CaptureData: [CaptureData!]!
  Model: [Model!]!
  Scene: [Scene!]!
  IntermediaryFile: [IntermediaryFile!]!
  ProjectDocumentation: [ProjectDocumentation!]!
}

input SearchIngestionSubjectsInput {
  query: String!
}

type SearchIngestionSubjectsResult {
  SubjectUnitIdentifier: [SubjectUnitIdentifier!]!
}

input GetIngestionItemsForSubjectsInput {
  idSubjects: [Int!]!
}

type GetIngestionItemsForSubjectsResult {
  Item: [Item!]!
}

input GetIngestionProjectsForSubjectsInput {
  idSubjects: [Int!]!
}

type GetIngestionProjectsForSubjectsResult {
  Project: [Project!]!
}

input GetUnitInput {
  idUnit: Int!
}

type GetUnitResult {
  Unit: Unit
}

input GetProjectInput {
  idProject: Int!
}

type GetProjectResult {
  Project: Project
}

input GetProjectDocumentationInput {
  idProjectDocumentation: Int!
}

type GetProjectDocumentationResult {
  ProjectDocumentation: ProjectDocumentation
}

input GetSubjectInput {
  idSubject: Int!
}

type GetSubjectResult {
  Subject: Subject
}

input GetItemInput {
  idItem: Int!
}

type GetItemResult {
  Item: Item
}

type Unit {
  idUnit: Int!
  Abbreviation: String
  ARKPrefix: String
  Name: String!
  Actor: [Actor]
  Subject: [Subject]
  SystemObject: SystemObject
}

type Project {
  idProject: Int!
  Name: String!
  Description: String
  ProjectDocumentation: [ProjectDocumentation]
  SystemObject: SystemObject
  Workflow: [Workflow]
}

type ProjectDocumentation {
  idProjectDocumentation: Int!
  Description: String!
  idProject: Int!
  Name: String!
  Project: Project
  SystemObject: SystemObject
}

type Stakeholder {
  idStakeholder: Int!
  IndividualName: String!
  OrganizationName: String!
  MailingAddress: String
  EmailAddress: String
  PhoneNumberMobile: String
  PhoneNumberOffice: String
  SystemObject: SystemObject
}

type GeoLocation {
  idGeoLocation: Int!
  Altitude: Float
  Latitude: Float
  Longitude: Float
  R0: Float
  R1: Float
  R2: Float
  R3: Float
  TS0: Float
  TS1: Float
  TS2: Float
}

type Subject {
  idSubject: Int!
  idUnit: Int!
  Name: String!
  AssetThumbnail: Asset
  idAssetThumbnail: Int
  idGeoLocation: Int
  idIdentifierPreferred: Int
  GeoLocation: GeoLocation
  Unit: Unit
  IdentifierPreferred: Identifier
  Item: [Item]
  SystemObject: SystemObject
}

type Item {
  idItem: Int!
  EntireSubject: Boolean!
  Name: String!
  idAssetThumbnail: Int
  idGeoLocation: Int
  AssetThumbnail: Asset
  GeoLocation: GeoLocation
  Subject: Subject
  SystemObject: SystemObject
}

input CreateUserInput {
  Name: String!
  EmailAddress: String!
  SecurityID: String!
}

type CreateUserResult {
  User: User
}

type GetCurrentUserResult {
  User: User
}

input GetUserInput {
  idUser: Int!
}

type GetUserResult {
  User: User
}

type User {
  idUser: Int!
  Active: Boolean!
  DateActivated: DateTime!
  EmailAddress: String!
  Name: String!
  SecurityID: String!
  DateDisabled: DateTime
  EmailSettings: Int
  WorkflowNotificationTime: DateTime
  AccessPolicy: [AccessPolicy]
  AssetVersion: [AssetVersion]
  LicenseAssignment: [LicenseAssignment]
  Metadata: [Metadata]
  UserPersonalizationSystemObject: [UserPersonalizationSystemObject]
  UserPersonalizationUrl: [UserPersonalizationUrl]
  Workflow: [Workflow]
  WorkflowStep: [WorkflowStep]
}

type UserPersonalizationSystemObject {
  idUserPersonalizationSystemObject: Int!
  idSystemObject: Int!
  idUser: Int!
  Personalization: String
  SystemObject: SystemObject
  User: User
}

type UserPersonalizationUrl {
  idUserPersonalizationUrl: Int!
  idUser: Int!
  Personalization: String!
  URL: String!
  User: User
}

input CreateVocabularyInput {
  idVocabularySet: Int!
  SortOrder: Int!
  Term: String!
}

type CreateVocabularyResult {
  Vocabulary: Vocabulary
}

input CreateVocabularySetInput {
  Name: String!
  SystemMaintained: Boolean!
}

type CreateVocabularySetResult {
  VocabularySet: VocabularySet
}

input GetVocabularyInput {
  idVocabulary: Int!
}

type GetVocabularyResult {
  Vocabulary: Vocabulary
}

input GetVocabularyEntriesInput {
  eVocabSetIDs: [Int!]!
}

type VocabularyEntry {
  eVocabSetID: Int!
  Vocabulary: [Vocabulary!]!
}

type GetVocabularyEntriesResult {
  VocabularyEntries: [VocabularyEntry!]!
}

type Vocabulary {
  idVocabulary: Int!
  idVocabularySet: Int!
  SortOrder: Int!
  Term: String!
  VocabularySet: VocabularySet
}

type VocabularySet {
  idVocabularySet: Int!
  Name: String!
  SystemMaintained: Boolean!
  Vocabulary: [Vocabulary]
}

input GetWorkflowInput {
  idWorkflow: Int!
}

type GetWorkflowResult {
  Workflow: Workflow
}

type Workflow {
  idWorkflow: Int!
  DateInitiated: DateTime!
  DateUpdated: DateTime!
  idWorkflowTemplate: Int!
  idProject: Int
  idUserInitiator: Int
  Project: Project
  UserInitiator: User
  WorkflowTemplate: WorkflowTemplate
  WorkflowStep: [WorkflowStep]
}

type WorkflowStep {
  idWorkflowStep: Int!
  DateCreated: DateTime!
  idUserOwner: Int!
  idVWorkflowStepType: Int!
  idWorkflow: Int!
  State: Int!
  DateCompleted: DateTime
  User: User
  VWorkflowStepType: Vocabulary
  Workflow: Workflow
  WorkflowStepSystemObjectXref: [WorkflowStepSystemObjectXref]
}

type WorkflowStepSystemObjectXref {
  idWorkflowStepSystemObjectXref: Int!
  idSystemObject: Int!
  idWorkflowStep: Int!
  Input: Boolean!
  SystemObject: SystemObject
  WorkflowStep: WorkflowStep
}

type WorkflowTemplate {
  idWorkflowTemplate: Int!
  Name: String!
  Workflow: [Workflow]
}
