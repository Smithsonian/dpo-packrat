type AccessAction {
  AccessRole: [AccessRole]
  Name: String!
  SortOrder: Int!
  idAccessAction: Int!
}

type AccessContext {
  AccessContextObject: [AccessContextObject]
  AccessPolicy: [AccessPolicy]
  Authoritative: Boolean!
  CaptureData: Boolean!
  Global: Boolean!
  IntermediaryFile: Boolean!
  Model: Boolean!
  Scene: Boolean!
  idAccessContext: Int!
}

type AccessContextObject {
  AccessContext: AccessContext
  SystemObject: SystemObject
  idAccessContext: Int!
  idAccessContextObject: Int!
  idSystemObject: Int!
}

type AccessPolicy {
  AccessContext: AccessContext
  AccessRole: AccessRole
  User: User
  idAccessContext: Int!
  idAccessPolicy: Int!
  idAccessRole: Int!
  idUser: Int!
}

type AccessRole {
  AccessAction: [AccessAction]
  Name: String!
  idAccessRole: Int!
}

type Actor {
  IndividualName: String
  OrganizationName: String
  SystemObject: SystemObject
  Unit: Unit
  idActor: Int!
  idUnit: Int
}

type ActorDetailFields {
  OrganizationName: String
}

input ActorDetailFieldsInput {
  OrganizationName: String
}

input AreCameraSettingsUniformInput {
  idAssetVersion: Int!
}

type AreCameraSettingsUniformResult {
  isUniform: Boolean!
}

type Asset {
  AssetGroup: AssetGroup
  AssetVersion: [AssetVersion]
  FileName: String!
  StorageKey: String
  SystemObject: SystemObject
  SystemObjectSource: SystemObject
  VAssetType: Vocabulary
  idAsset: Int!
  idAssetGroup: Int
  idSystemObject: Int
  idVAssetType: Int
}

type AssetDetailFields {
  Asset: Asset
  AssetType: Int
  idAsset: Int
}

input AssetDetailFieldsInput {
  AssetType: Int
}

type AssetGroup {
  Asset: [Asset]
  idAssetGroup: Int!
}

type AssetVersion {
  Asset: Asset
  Comment: String
  DateCreated: DateTime!
  FileName: String!
  FilePath: String!
  Ingested: Boolean
  SOAttachment: SystemObject
  SOAttachmentObjectType: Int
  StorageHash: String!
  StorageKeyStaging: String!
  StorageSize: BigInt!
  SystemObject: SystemObject
  User: User
  Version: Int!
  idAsset: Int!
  idAssetVersion: Int!
  idSOAttachment: Int
  idUserCreator: Int!
}

type AssetVersionContent {
  all: [String!]!
  folders: [String!]!
  idAssetVersion: Int!
}

type AssetVersionDetailFields {
  AssetVersion: AssetVersion
  Creator: String
  DateCreated: DateTime
  FilePath: String
  Ingested: Boolean
  StorageHash: String
  StorageSize: BigInt
  Version: Int
  idAsset: Int
  idAssetVersion: Int
}

input AssetVersionDetailFieldsInput {
  Creator: String
  DateCreated: DateTime
  FilePath: String
  Ingested: Boolean
  StorageHash: String
  StorageSize: BigInt
  Version: Int
}

input AssignLicenseInput {
  idLicense: Int!
  idSystemObject: Int!
}

type AssignLicenseResult {
  message: String
  success: Boolean!
}

scalar BigInt

type CaptureData {
  AssetThumbnail: Asset
  CaptureDataFile: [CaptureDataFile]
  CaptureDataGroup: [CaptureDataGroup]
  CaptureDataPhoto: [CaptureDataPhoto]
  DateCaptured: DateTime!
  Description: String!
  SystemObject: SystemObject
  VCaptureMethod: Vocabulary
  idAssetThumbnail: Int
  idCaptureData: Int!
  idVCaptureMethod: Int!
}

type CaptureDataDetailFields {
  backgroundRemovalMethod: Int
  cameraSettingUniform: Boolean
  captureMethod: Int
  clusterGeometryFieldId: Int
  clusterType: Int
  datasetFieldId: Int
  datasetType: Int
  datasetUse: String!
  dateCaptured: String
  description: String
  focusType: Int
  folders: [IngestFolder!]!
  isValidData: Boolean
  itemArrangementFieldId: Int
  itemPositionFieldId: Int
  itemPositionType: Int
  lightsourceType: Int
  systemCreated: Boolean
}

input CaptureDataDetailFieldsInput {
  backgroundRemovalMethod: Int
  cameraSettingUniform: Boolean
  captureMethod: Int
  clusterGeometryFieldId: Int
  clusterType: Int
  datasetFieldId: Int
  datasetType: Int
  datasetUse: String!
  dateCaptured: DateTime
  description: String
  focusType: Int
  folders: [IngestFolderInput!]!
  isValidData: Boolean
  itemArrangementFieldId: Int
  itemPositionFieldId: Int
  itemPositionType: Int
  lightsourceType: Int
  systemCreated: Boolean
}

type CaptureDataFile {
  Asset: Asset
  CaptureData: CaptureData
  CompressedMultipleFiles: Boolean!
  VVariantType: Vocabulary
  idAsset: Int!
  idCaptureData: Int!
  idCaptureDataFile: Int!
  idVVariantType: Int!
}

type CaptureDataGroup {
  CaptureData: [CaptureData]
  idCaptureDataGroup: Int!
}

type CaptureDataPhoto {
  CameraSettingsUniform: Boolean
  CaptureData: CaptureData
  CaptureDatasetFieldID: Int
  CaptureDatasetUse: String!
  ClusterGeometryFieldID: Int
  ItemArrangementFieldID: Int
  ItemPositionFieldID: Int
  VBackgroundRemovalMethod: Vocabulary
  VCaptureDatasetType: Vocabulary
  VClusterType: Vocabulary
  VFocusType: Vocabulary
  VItemPositionType: Vocabulary
  VLightSourceType: Vocabulary
  idCaptureData: Int!
  idCaptureDataPhoto: Int!
  idVBackgroundRemovalMethod: Int
  idVCaptureDatasetType: Int!
  idVClusterType: Int
  idVFocusType: Int
  idVItemPositionType: Int
  idVLightSourceType: Int
}

input ClearLicenseAssignmentInput {
  clearAll: Boolean
  idSystemObject: Int!
}

type ClearLicenseAssignmentResult {
  message: String
  success: Boolean!
}

type ColumnDefinition {
  colAlign: String!
  colDisplay: Boolean!
  colLabel: String!
  colName: String!
  colType: Int!
}

input CreateCaptureDataInput {
  DateCaptured: DateTime!
  Description: String!
  Name: String!
  idAssetThumbnail: Int
  idVCaptureMethod: Int!
}

input CreateCaptureDataPhotoInput {
  CameraSettingsUniform: Boolean!
  CaptureDatasetFieldID: Int!
  CaptureDatasetUse: String!
  ClusterGeometryFieldID: Int!
  ItemArrangementFieldID: Int!
  ItemPositionFieldID: Int!
  idCaptureData: Int!
  idVBackgroundRemovalMethod: Int!
  idVCaptureDatasetType: Int!
  idVClusterType: Int
  idVFocusType: Int
  idVItemPositionType: Int
  idVLightSourceType: Int
}

type CreateCaptureDataPhotoResult {
  CaptureDataPhoto: CaptureDataPhoto
}

type CreateCaptureDataResult {
  CaptureData: CaptureData
}

input CreateGeoLocationInput {
  Altitude: Int
  Latitude: Int
  Longitude: Int
  R0: Int
  R1: Int
  R2: Int
  R3: Int
  TS0: Int
  TS1: Int
  TS2: Int
}

type CreateGeoLocationResult {
  GeoLocation: GeoLocation
}

input CreateIdentifierInput {
  idSystemObject: Int
  identifierType: Int!
  identifierValue: String!
  preferred: Boolean
}

input CreateLicenseInput {
  Description: String!
  Name: String!
  RestrictLevel: Int!
}

type CreateLicenseResult {
  License: License
}

input CreateProjectInput {
  Description: String!
  Name: String!
  Unit: Int!
}

type CreateProjectResult {
  Project: Project
}

input CreateSubjectInput {
  Name: String!
  idAssetThumbnail: Int
  idGeoLocation: Int
  idIdentifierPreferred: Int
  idUnit: Int!
}

type CreateSubjectResult {
  Subject: Subject
}

input CreateSubjectWithIdentifiersInput {
  identifiers: [CreateIdentifierInput!]!
  metadata: [MetadataInput!]
  subject: CreateSubjectInput!
  systemCreated: Boolean!
}

type CreateSubjectWithIdentifiersResult {
  message: String
  success: Boolean!
}

input CreateUnitInput {
  ARKPrefix: String!
  Abbreviation: String!
  Name: String!
}

type CreateUnitResult {
  Unit: Unit
}

input CreateUserInput {
  EmailAddress: String!
  EmailSettings: Int
  Name: String!
  SecurityID: String
  WorkflowNotificationTime: DateTime
}

type CreateUserResult {
  User: User
}

input CreateVocabularyInput {
  SortOrder: Int!
  Term: String!
  idVocabularySet: Int!
}

type CreateVocabularyResult {
  Vocabulary: Vocabulary
}

input CreateVocabularySetInput {
  Name: String!
  SystemMaintained: Boolean!
}

type CreateVocabularySetResult {
  VocabularySet: VocabularySet
}

scalar DateTime

input DeleteIdentifierInput {
  idIdentifier: Int!
}

type DeleteIdentifierResult {
  success: Boolean!
}

input DeleteMetadataInput {
  idMetadata: Int!
}

type DeleteMetadataResult {
  success: Boolean!
}

input DeleteObjectConnectionInput {
  idSystemObjectDerived: Int!
  idSystemObjectMaster: Int!
  objectTypeDerived: Int!
  objectTypeMaster: Int!
}

type DeleteObjectConnectionResult {
  details: String!
  success: Boolean!
}

type DetailVersion {
  Comment: String
  CommentLink: String
  creator: String!
  dateCreated: DateTime!
  hash: String!
  idAssetVersion: Int!
  idSystemObject: Int!
  ingested: Boolean!
  name: String!
  size: BigInt!
  version: Int!
}

input DiscardUploadedAssetVersionsInput {
  idAssetVersions: [Int!]!
}

type DiscardUploadedAssetVersionsResult {
  success: Boolean!
}

input ExistingRelationship {
  idSystemObject: Int!
  objectType: Int!
}

type GeoLocation {
  Altitude: Float
  Latitude: Float
  Longitude: Float
  R0: Float
  R1: Float
  R2: Float
  R3: Float
  TS0: Float
  TS1: Float
  TS2: Float
  idGeoLocation: Int!
}

input GetAccessPolicyInput {
  idAccessPolicy: Int!
}

type GetAccessPolicyResult {
  AccessPolicy: AccessPolicy
}

input GetAllUsersInput {
  active: USER_STATUS!
  search: String!
}

type GetAllUsersResult {
  User: [User!]!
}

input GetAssetDetailsForSystemObjectInput {
  idSystemObject: Int!
}

type GetAssetDetailsForSystemObjectResult {
  assetDetailRows: [JSON!]!
  columns: [ColumnDefinition!]!
}

input GetAssetInput {
  idAsset: Int!
}

type GetAssetResult {
  Asset: Asset
}

type GetAssetVersionDetailResult {
  CaptureDataPhoto: IngestPhotogrammetry
  Item: Item
  Model: IngestModel
  Project: [Project!]
  Scene: IngestScene
  SubjectUnitIdentifier: SubjectUnitIdentifier
  idAssetVersion: Int!
}

input GetAssetVersionsDetailsInput {
  idAssetVersions: [Int!]!
}

type GetAssetVersionsDetailsResult {
  Details: [GetAssetVersionDetailResult!]!
  valid: Boolean!
}

input GetCaptureDataInput {
  idCaptureData: Int!
}

input GetCaptureDataPhotoInput {
  idCaptureDataPhoto: Int!
}

type GetCaptureDataPhotoResult {
  CaptureDataPhoto: CaptureDataPhoto
}

type GetCaptureDataResult {
  CaptureData: CaptureData
}

input GetContentsForAssetVersionsInput {
  idAssetVersions: [Int!]!
}

type GetContentsForAssetVersionsResult {
  AssetVersionContent: [AssetVersionContent!]!
}

type GetCurrentUserResult {
  User: User
}

input GetDetailsTabDataForObjectInput {
  idSystemObject: Int!
  objectType: Int!
}

type GetDetailsTabDataForObjectResult {
  Actor: ActorDetailFields
  Asset: AssetDetailFields
  AssetVersion: AssetVersionDetailFields
  CaptureData: CaptureDataDetailFields
  IntermediaryFile: IntermediaryFileDetailFields
  Item: ItemDetailFields
  Model: ModelConstellation
  Project: ProjectDetailFields
  ProjectDocumentation: ProjectDocumentationDetailFields
  Scene: SceneDetailFields
  Stakeholder: StakeholderDetailFields
  Subject: SubjectDetailFields
  Unit: UnitDetailFields
}

type GetEdanUnitsNamedResult {
  UnitEdan: [UnitEdan!]
}

type GetFilterViewDataResult {
  projects: [Project!]!
  units: [Unit!]!
}

input GetIngestTitleInput {
  item: IngestItemInput
  sourceObjects: [RelatedObjectInput!]
}

type GetIngestTitleResult {
  ingestTitle: IngestTitle
}

input GetIngestionItemsInput {
  idSubjects: [Int!]!
}

type GetIngestionItemsResult {
  IngestionItem: [IngestionItem!]
}

input GetIntermediaryFileInput {
  idIntermediaryFile: Int!
}

type GetIntermediaryFileResult {
  IntermediaryFile: IntermediaryFile
}

input GetItemInput {
  idItem: Int!
}

type GetItemResult {
  Item: Item
}

input GetItemsForSubjectInput {
  idSubject: Int!
  pagination: PaginationInput = {}
}

type GetItemsForSubjectResult {
  Item: [Item!]!
}

input GetLicenseInput {
  idLicense: Int!
}

input GetLicenseListInput {
  search: String
}

type GetLicenseListResult {
  Licenses: [License!]!
}

type GetLicenseResult {
  License: License
}

input GetModelConstellationForAssetVersionInput {
  idAssetVersion: Int!
}

type GetModelConstellationForAssetVersionResult {
  ModelConstellation: ModelConstellation
  idAssetVersion: Int!
}

input GetModelConstellationInput {
  idModel: Int!
}

type GetModelConstellationResult {
  ModelConstellation: ModelConstellation
}

input GetModelInput {
  idModel: Int!
}

type GetModelResult {
  Model: Model
}

input GetObjectChildrenInput {
  captureMethod: [Int!]!
  cursorMark: String!
  dateCreatedFrom: DateTime
  dateCreatedTo: DateTime
  has: [Int!]!
  idRoot: Int!
  metadataColumns: [Int!]!
  missing: [Int!]!
  modelFileType: [Int!]!
  modelPurpose: [Int!]!
  objectTypes: [Int!]!
  objectsToDisplay: [Int!]!
  projects: [Int!]!
  rows: Int!
  search: String!
  units: [Int!]!
  variantType: [Int!]!
}

type GetObjectChildrenResult {
  cursorMark: String
  entries: [NavigationResultEntry!]!
  error: String
  metadataColumns: [Int!]!
  success: Boolean!
}

input GetObjectsForItemInput {
  idItem: Int!
}

type GetObjectsForItemResult {
  CaptureData: [CaptureData!]!
  IntermediaryFile: [IntermediaryFile!]!
  Model: [Model!]!
  ProjectDocumentation: [ProjectDocumentation!]!
  Scene: [Scene!]!
}

input GetProjectDocumentationInput {
  idProjectDocumentation: Int!
}

type GetProjectDocumentationResult {
  ProjectDocumentation: ProjectDocumentation
}

input GetProjectInput {
  idProject: Int!
}

input GetProjectListInput {
  search: String!
}

type GetProjectListResult {
  projects: [Project!]!
}

type GetProjectResult {
  Project: Project
}

input GetSceneForAssetVersionInput {
  directory: String
  idAssetVersion: Int!
}

type GetSceneForAssetVersionResult {
  SceneConstellation: SceneConstellation
  idAssetVersion: Int!
  message: String
  success: Boolean!
}

input GetSceneInput {
  idScene: Int!
}

type GetSceneResult {
  Scene: Scene
}

input GetSourceObjectIdentiferInput {
  idSystemObjects: [Int!]!
}

type GetSourceObjectIdentiferResult {
  sourceObjectIdentifiers: [SourceObjectIdentifier!]!
}

input GetSubjectInput {
  idSubject: Int!
}

input GetSubjectListInput {
  idUnit: Int
  pageNumber: Int
  rowCount: Int
  search: String!
  sortBy: Int
  sortOrder: Boolean
}

type GetSubjectListResult {
  subjects: [SubjectUnitIdentifier!]!
}

type GetSubjectResult {
  Subject: Subject
}

input GetSubjectsForUnitInput {
  idUnit: Int!
  pagination: PaginationInput = {}
}

type GetSubjectsForUnitResult {
  Subject: [Subject!]!
}

input GetSystemObjectDetailsInput {
  idSystemObject: Int!
}

type GetSystemObjectDetailsResult {
  allowed: Boolean!
  asset: RepositoryPath
  assetOwner: RepositoryPath
  derivedObjects: [RelatedObject!]!
  idObject: Int!
  idSystemObject: Int!
  identifiers: [IngestIdentifier!]!
  item: [RepositoryPath!]
  license: License
  licenseInheritance: Int
  metadata: [Metadata!]!
  name: String!
  objectAncestors: [[RepositoryPath!]!]!
  objectType: Int!
  objectVersions: [SystemObjectVersion!]!
  project: [RepositoryPath!]
  publishable: Boolean!
  publishedEnum: Int!
  publishedState: String!
  retired: Boolean!
  sourceObjects: [RelatedObject!]!
  subTitle: String
  subject: [RepositoryPath!]
  thumbnail: String
  unit: [RepositoryPath!]
}

input GetUnitInput {
  idUnit: Int!
}

type GetUnitResult {
  Unit: Unit
}

input GetUnitsFromEdanAbbreviationInput {
  abbreviation: String!
}

type GetUnitsFromEdanAbbreviationResult {
  Units: [Unit!]!
}

input GetUnitsFromNameSearchInput {
  search: String!
}

type GetUnitsFromNameSearchResult {
  Units: [Unit!]!
}

type GetUploadedAssetVersionResult {
  AssetVersion: [AssetVersion!]!
  UpdatedAssetVersionMetadata: [UpdatedAssetVersionMetadata!]!
  idAssetVersionsUpdated: [Int!]!
}

input GetUserInput {
  idUser: Int
}

type GetUserResult {
  User: User
}

input GetVersionsForAssetInput {
  idSystemObject: Int!
}

type GetVersionsForAssetResult {
  versions: [DetailVersion!]!
}

input GetVocabularyEntriesInput {
  eVocabSetIDs: [Int!]!
}

type GetVocabularyEntriesResult {
  VocabularyEntries: [VocabularyEntry!]!
}

input GetVocabularyInput {
  idVocabulary: Int!
}

type GetVocabularyResult {
  Vocabulary: Vocabulary
}

input GetVoyagerParamsInput {
  idSystemObject: Int!
}

type GetVoyagerParamsResult {
  document: String
  idSystemObjectScene: Int
  path: String
}

input GetWorkflowInput {
  idWorkflow: Int!
}

input GetWorkflowListInput {
  DateFrom: DateTime
  DateTo: DateTime
  State: [Int!]
  idUserInitiator: [Int!]
  idUserOwner: [Int!]
  idVJobType: [Int!]
  idVWorkflowType: [Int!]
  pageNumber: Int
  rowCount: Int
  sortBy: Int
  sortOrder: Boolean
}

type GetWorkflowListResult {
  WorkflowList: [WorkflowListResult]
}

type GetWorkflowResult {
  Workflow: Workflow
}

type Identifier {
  IdentifierValue: String!
  SystemObject: SystemObject
  VIdentifierType: Vocabulary
  idIdentifier: Int!
  idSystemObject: Int
  idVIdentifierType: Int
}

input IngestDataInput {
  item: IngestItemInput!
  model: [IngestModelInput!]!
  other: [IngestOtherInput!]!
  photogrammetry: [IngestPhotogrammetryInput!]!
  project: IngestProjectInput!
  scene: [IngestSceneInput!]!
  sceneAttachment: [IngestSceneAttachmentInput!]!
  subjects: [IngestSubjectInput!]!
}

type IngestDataResult {
  message: String
  success: Boolean!
}

type IngestFolder {
  name: String!
  variantType: Int
}

input IngestFolderInput {
  name: String!
  variantType: Int
}

type IngestIdentifier {
  idIdentifier: Int!
  identifier: String!
  identifierType: Int!
}

input IngestIdentifierInput {
  idIdentifier: Int!
  identifier: String!
  identifierType: Int!
}

input IngestItemInput {
  entireSubject: Boolean!
  id: Int
  name: String
  subtitle: String!
}

type IngestModel {
  creationMethod: Int!
  dateCreated: String!
  derivedObjects: [RelatedObject!]!
  directory: String!
  idAssetVersion: Int!
  identifiers: [IngestIdentifier!]!
  modality: Int!
  modelFileType: Int!
  name: String!
  purpose: Int!
  sourceObjects: [RelatedObject!]!
  subtitle: String!
  systemCreated: Boolean!
  units: Int!
}

input IngestModelInput {
  creationMethod: Int!
  dateCreated: String!
  derivedObjects: [RelatedObjectInput!]!
  directory: String!
  idAsset: Int
  idAssetVersion: Int!
  identifiers: [IngestIdentifierInput!]!
  modality: Int!
  modelFileType: Int!
  purpose: Int!
  skipSceneGenerate: Boolean
  sourceObjects: [RelatedObjectInput!]!
  subtitle: String!
  systemCreated: Boolean!
  units: Int!
  updateNotes: String
}

input IngestOtherInput {
  idAsset: Int
  idAssetVersion: Int!
  identifiers: [IngestIdentifierInput!]!
  systemCreated: Boolean!
  updateNotes: String
}

type IngestPhotogrammetry {
  backgroundRemovalMethod: Int
  cameraSettingUniform: Boolean!
  clusterGeometryFieldId: Int
  clusterType: Int
  datasetFieldId: Int
  datasetType: Int!
  datasetUse: String!
  dateCaptured: String!
  derivedObjects: [RelatedObject!]!
  description: String!
  directory: String!
  focusType: Int
  folders: [IngestFolder!]!
  idAssetVersion: Int!
  identifiers: [IngestIdentifier!]!
  itemArrangementFieldId: Int
  itemPositionFieldId: Int
  itemPositionType: Int
  lightsourceType: Int
  name: String!
  sourceObjects: [RelatedObject!]!
  systemCreated: Boolean!
}

input IngestPhotogrammetryInput {
  backgroundRemovalMethod: Int
  cameraSettingUniform: Boolean!
  clusterGeometryFieldId: Int
  clusterType: Int
  datasetFieldId: Int
  datasetType: Int!
  datasetUse: String!
  dateCaptured: String!
  derivedObjects: [RelatedObjectInput!]!
  description: String!
  directory: String!
  focusType: Int
  folders: [IngestFolderInput!]!
  idAsset: Int
  idAssetVersion: Int!
  identifiers: [IngestIdentifierInput!]!
  itemArrangementFieldId: Int
  itemPositionFieldId: Int
  itemPositionType: Int
  lightsourceType: Int
  name: String!
  sourceObjects: [RelatedObjectInput!]!
  systemCreated: Boolean!
  updateNotes: String
}

input IngestProjectInput {
  id: Int!
  name: String!
}

type IngestScene {
  approvedForPublication: Boolean!
  derivedObjects: [RelatedObject!]!
  directory: String!
  idAssetVersion: Int!
  identifiers: [IngestIdentifier!]!
  name: String!
  posedAndQCd: Boolean!
  referenceModels: [ReferenceModel!]!
  sourceObjects: [RelatedObject!]!
  subtitle: String!
  systemCreated: Boolean!
}

input IngestSceneAttachmentInput {
  category: Int
  dracoCompressed: Boolean
  fileType: Int
  gltfStandardized: Boolean
  idAssetVersion: Int!
  identifiers: [IngestIdentifierInput!]!
  modelType: Int
  systemCreated: Boolean!
  title: String
  type: Int
  units: Int
}

input IngestSceneInput {
  approvedForPublication: Boolean!
  derivedObjects: [RelatedObjectInput!]!
  directory: String!
  idAsset: Int
  idAssetVersion: Int!
  identifiers: [IngestIdentifierInput!]!
  posedAndQCd: Boolean!
  sourceObjects: [RelatedObjectInput!]!
  subtitle: String!
  systemCreated: Boolean!
  updateNotes: String
}

input IngestSubjectInput {
  arkId: String!
  collectionId: String!
  id: Int
  name: String!
  unit: String!
}

type IngestTitle {
  forced: Boolean!
  subtitle: [String]
  title: String!
}

type IngestionItem {
  EntireSubject: Boolean!
  MediaGroupName: String!
  ProjectName: String!
  idItem: Int!
  idProject: Int!
}

type IntermediaryFile {
  Asset: Asset
  DateCreated: DateTime!
  SystemObject: SystemObject
  idAsset: Int!
  idIntermediaryFile: Int!
}

type IntermediaryFileDetailFields {
  idIntermediaryFile: Int!
}

type Item {
  AssetThumbnail: Asset
  EntireSubject: Boolean!
  GeoLocation: GeoLocation
  Name: String!
  Subject: Subject
  SystemObject: SystemObject
  idAssetThumbnail: Int
  idGeoLocation: Int
  idItem: Int!
}

type ItemDetailFields {
  Altitude: Float
  EntireSubject: Boolean
  Latitude: Float
  Longitude: Float
  R0: Float
  R1: Float
  R2: Float
  R3: Float
  TS0: Float
  TS1: Float
  TS2: Float
}

input ItemDetailFieldsInput {
  Altitude: Float
  EntireSubject: Boolean
  Latitude: Float
  Longitude: Float
  R0: Float
  R1: Float
  R2: Float
  R3: Float
  TS0: Float
  TS1: Float
  TS2: Float
}

scalar JSON

type Job {
  Frequency: String
  Name: String!
  Status: Int
  VJobType: Vocabulary
  idJob: Int!
  idVJobType: Int!
}

type JobRun {
  Configuration: String
  DateEnd: DateTime
  DateStart: DateTime
  Error: String
  Job: Job
  Output: String
  Parameters: String
  Result: Boolean
  Status: Int!
  idJob: Int!
  idJobRun: Int!
}

type License {
  Description: String!
  LicenseAssignment: [LicenseAssignment]
  Name: String!
  RestrictLevel: Int!
  idLicense: Int!
}

type LicenseAssignment {
  DateEnd: DateTime
  DateStart: DateTime
  License: License
  SystemObject: SystemObject
  UserCreator: User
  idLicense: Int!
  idLicenseAssignment: Int!
  idSystemObject: Int
  idUserCreator: Int
}

type Metadata {
  AssetVersionValue: AssetVersion
  Label: String
  Name: String!
  SystemObject: SystemObject
  SystemObjectParent: SystemObject
  User: User
  VMetadataSource: Vocabulary
  Value: String
  ValueExtended: String
  ValueShort: String
  idAssetVersionValue: Int
  idMetadata: Int!
  idSystemObject: Int
  idSystemObjectParent: Int
  idUser: Int
  idVMetadataSource: Int
}

input MetadataInput {
  Label: String!
  Name: String!
  Value: String!
  idMetadata: Int
}

type Model {
  AssetThumbnail: Asset
  CountAnimations: Int
  CountCameras: Int
  CountEmbeddedTextures: Int
  CountFaces: Int
  CountLights: Int
  CountLinkedTextures: Int
  CountMaterials: Int
  CountMeshes: Int
  CountTriangles: Int
  CountVertices: Int
  DateCreated: DateTime!
  FileEncoding: String
  IsDracoCompressed: Boolean
  ModelConstellation: ModelConstellation
  ModelObject: [ModelObject]
  ModelProcessingAction: [ModelProcessingAction]
  ModelSceneXref: [ModelSceneXref]
  Name: String!
  SystemObject: SystemObject
  VCreationMethod: Vocabulary
  VFileType: Vocabulary
  VModality: Vocabulary
  VPurpose: Vocabulary
  VUnits: Vocabulary
  idAssetThumbnail: Int
  idModel: Int!
  idVCreationMethod: Int
  idVFileType: Int
  idVModality: Int
  idVPurpose: Int
  idVUnits: Int
}

type ModelAsset {
  Asset: Asset!
  AssetName: String!
  AssetType: String!
  AssetVersion: AssetVersion!
}

type ModelConstellation {
  Model: Model!
  ModelAssets: [ModelAsset!]
  ModelMaterialChannels: [ModelMaterialChannel!]
  ModelMaterialUVMaps: [ModelMaterialUVMap!]
  ModelMaterials: [ModelMaterial!]
  ModelObjectModelMaterialXref: [ModelObjectModelMaterialXref!]
  ModelObjects: [ModelObject!]
}

input ModelDetailFieldsInput {
  CreationMethod: Int
  DateCreated: DateTime
  Modality: Int
  ModelFileType: Int
  Name: String
  Purpose: Int
  Units: Int
}

type ModelMaterial {
  ModelMaterialChannel: [ModelMaterialChannel]
  Name: String
  idModelMaterial: Int!
}

type ModelMaterialChannel {
  AdditionalAttributes: String
  ChannelPosition: Int
  ChannelWidth: Int
  MaterialTypeOther: String
  ModelMaterial: ModelMaterial
  ModelMaterialUVMap: ModelMaterialUVMap
  Scalar1: Float
  Scalar2: Float
  Scalar3: Float
  Scalar4: Float
  Source: String
  Type: String
  UVMapEmbedded: Boolean
  VMaterialType: Vocabulary
  Value: String
  idModelMaterial: Int!
  idModelMaterialChannel: Int!
  idModelMaterialUVMap: Int
  idVMaterialType: Int
}

type ModelMaterialUVMap {
  Asset: Asset
  Model: Model
  UVMapEdgeLength: Int!
  idAsset: Int!
  idModel: Int!
  idModelMaterialUVMap: Int!
}

type ModelObject {
  BoundingBoxP1X: Float
  BoundingBoxP1Y: Float
  BoundingBoxP1Z: Float
  BoundingBoxP2X: Float
  BoundingBoxP2Y: Float
  BoundingBoxP2Z: Float
  CountColorChannels: Int
  CountFaces: Int
  CountTextureCoordinateChannels: Int
  CountTriangles: Int
  CountVertices: Int
  HasBones: Boolean
  HasFaceNormals: Boolean
  HasTangents: Boolean
  HasTextureCoordinates: Boolean
  HasVertexColor: Boolean
  HasVertexNormals: Boolean
  IsTwoManifoldBounded: Boolean
  IsTwoManifoldUnbounded: Boolean
  IsWatertight: Boolean
  Model: Model
  SelfIntersecting: Boolean
  idModel: Int!
  idModelObject: Int!
}

type ModelObjectModelMaterialXref {
  ModelMaterial: ModelMaterial
  ModelObject: ModelObject
  idModelMaterial: Int!
  idModelObject: Int!
  idModelObjectModelMaterialXref: Int!
}

type ModelProcessingAction {
  Actor: Actor
  DateProcessed: DateTime!
  Description: String!
  Model: Model
  ModelProcessingActionStep: [ModelProcessingActionStep]!
  ToolsUsed: String!
  idActor: Int!
  idModel: Int!
  idModelProcessingAction: Int!
}

type ModelProcessingActionStep {
  Description: String!
  ModelProcessingAction: ModelProcessingAction
  VActionMethod: Vocabulary
  idModelProcessingAction: Int!
  idModelProcessingActionStep: Int!
  idVActionMethod: Int!
}

type ModelSceneXref {
  BoundingBoxP1X: Float
  BoundingBoxP1Y: Float
  BoundingBoxP1Z: Float
  BoundingBoxP2X: Float
  BoundingBoxP2Y: Float
  BoundingBoxP2Z: Float
  FileSize: BigInt
  Model: Model
  Name: String
  Quality: String
  R0: Float
  R1: Float
  R2: Float
  R3: Float
  Scene: Scene
  TS0: Float
  TS1: Float
  TS2: Float
  UVResolution: Int
  Usage: String
  idModel: Int!
  idModelSceneXref: Int!
  idScene: Int!
}

type Mutation {
  assignLicense(input: AssignLicenseInput!): AssignLicenseResult!
  clearLicenseAssignment(input: ClearLicenseAssignmentInput!): ClearLicenseAssignmentResult!
  createCaptureData(input: CreateCaptureDataInput!): CreateCaptureDataResult!
  createCaptureDataPhoto(input: CreateCaptureDataPhotoInput!): CreateCaptureDataPhotoResult!
  createGeoLocation(input: CreateGeoLocationInput!): CreateGeoLocationResult!
  createLicense(input: CreateLicenseInput!): CreateLicenseResult!
  createProject(input: CreateProjectInput!): CreateProjectResult!
  createSubject(input: CreateSubjectInput!): CreateSubjectResult!
  createSubjectWithIdentifiers(input: CreateSubjectWithIdentifiersInput!): CreateSubjectWithIdentifiersResult!
  createUnit(input: CreateUnitInput!): CreateUnitResult!
  createUser(input: CreateUserInput!): CreateUserResult!
  createVocabulary(input: CreateVocabularyInput!): CreateVocabularyResult!
  createVocabularySet(input: CreateVocabularySetInput!): CreateVocabularySetResult!
  deleteIdentifier(input: DeleteIdentifierInput!): DeleteIdentifierResult!
  deleteMetadata(input: DeleteMetadataInput!): DeleteMetadataResult!
  deleteObjectConnection(input: DeleteObjectConnectionInput!): DeleteObjectConnectionResult!
  discardUploadedAssetVersions(input: DiscardUploadedAssetVersionsInput!): DiscardUploadedAssetVersionsResult!
  ingestData(input: IngestDataInput!): IngestDataResult!
  publish(input: PublishInput!): PublishResult!
  rollbackAssetVersion(input: RollbackAssetVersionInput!): RollbackAssetVersionResult!
  rollbackSystemObjectVersion(input: RollbackSystemObjectVersionInput!): RollbackSystemObjectVersionResult!
  updateDerivedObjects(input: UpdateDerivedObjectsInput!): UpdateDerivedObjectsResult!
  updateLicense(input: UpdateLicenseInput!): CreateLicenseResult!
  updateObjectDetails(input: UpdateObjectDetailsInput!): UpdateObjectDetailsResult!
  updateSourceObjects(input: UpdateSourceObjectsInput!): UpdateSourceObjectsResult!
  updateUser(input: UpdateUserInput!): CreateUserResult!
  uploadAsset(file: Upload!, idAsset: Int, idSOAttachment: Int, type: Int!): UploadAssetResult!
}

type NavigationResultEntry {
  idObject: Int!
  idSystemObject: Int!
  metadata: [String!]!
  name: String!
  objectType: Int!
}

input PaginationInput {
  first: Int
  offset: Int
  size: Int
  skip: Int
}

type Project {
  Description: String
  Name: String!
  ProjectDocumentation: [ProjectDocumentation]
  SystemObject: SystemObject
  Workflow: [Workflow]
  idProject: Int!
}

type ProjectDetailFields {
  Description: String
}

input ProjectDetailFieldsInput {
  Description: String
}

type ProjectDocumentation {
  Description: String!
  Name: String!
  Project: Project
  SystemObject: SystemObject
  idProject: Int!
  idProjectDocumentation: Int!
}

type ProjectDocumentationDetailFields {
  Description: String
}

input ProjectDocumentationDetailFieldsInput {
  Description: String
}

input PublishInput {
  eState: Int!
  idSystemObject: Int!
}

type PublishResult {
  eState: Int
  message: String
  success: Boolean!
}

type Query {
  areCameraSettingsUniform(input: AreCameraSettingsUniformInput!): AreCameraSettingsUniformResult!
  getAccessPolicy(input: GetAccessPolicyInput!): GetAccessPolicyResult!
  getAllUsers(input: GetAllUsersInput!): GetAllUsersResult!
  getAsset(input: GetAssetInput!): GetAssetResult!
  getAssetDetailsForSystemObject(input: GetAssetDetailsForSystemObjectInput!): GetAssetDetailsForSystemObjectResult!
  getAssetVersionsDetails(input: GetAssetVersionsDetailsInput!): GetAssetVersionsDetailsResult!
  getCaptureData(input: GetCaptureDataInput!): GetCaptureDataResult!
  getCaptureDataPhoto(input: GetCaptureDataPhotoInput!): GetCaptureDataPhotoResult!
  getContentsForAssetVersions(input: GetContentsForAssetVersionsInput!): GetContentsForAssetVersionsResult!
  getCurrentUser: GetCurrentUserResult!
  getDetailsTabDataForObject(input: GetDetailsTabDataForObjectInput!): GetDetailsTabDataForObjectResult!
  getEdanUnitsNamed: GetEdanUnitsNamedResult!
  getFilterViewData: GetFilterViewDataResult!
  getIngestTitle(input: GetIngestTitleInput!): GetIngestTitleResult!
  getIngestionItems(input: GetIngestionItemsInput!): GetIngestionItemsResult!
  getIntermediaryFile(input: GetIntermediaryFileInput!): GetIntermediaryFileResult!
  getItem(input: GetItemInput!): GetItemResult!
  getItemsForSubject(input: GetItemsForSubjectInput!): GetItemsForSubjectResult!
  getLicense(input: GetLicenseInput!): GetLicenseResult!
  getLicenseList(input: GetLicenseListInput!): GetLicenseListResult!
  getModel(input: GetModelInput!): GetModelResult!
  getModelConstellation(input: GetModelConstellationInput!): GetModelConstellationResult!
  getModelConstellationForAssetVersion(input: GetModelConstellationForAssetVersionInput!): GetModelConstellationForAssetVersionResult!
  getObjectChildren(input: GetObjectChildrenInput!): GetObjectChildrenResult!
  getObjectsForItem(input: GetObjectsForItemInput!): GetObjectsForItemResult!
  getProject(input: GetProjectInput!): GetProjectResult!
  getProjectDocumentation(input: GetProjectDocumentationInput!): GetProjectDocumentationResult!
  getProjectList(input: GetProjectListInput!): GetProjectListResult!
  getScene(input: GetSceneInput!): GetSceneResult!
  getSceneForAssetVersion(input: GetSceneForAssetVersionInput!): GetSceneForAssetVersionResult!
  getSourceObjectIdentifer(input: GetSourceObjectIdentiferInput!): GetSourceObjectIdentiferResult!
  getSubject(input: GetSubjectInput!): GetSubjectResult!
  getSubjectList(input: GetSubjectListInput!): GetSubjectListResult!
  getSubjectsForUnit(input: GetSubjectsForUnitInput!): GetSubjectsForUnitResult!
  getSystemObjectDetails(input: GetSystemObjectDetailsInput!): GetSystemObjectDetailsResult!
  getUnit(input: GetUnitInput!): GetUnitResult!
  getUnitsFromEdanAbbreviation(input: GetUnitsFromEdanAbbreviationInput!): GetUnitsFromEdanAbbreviationResult!
  getUnitsFromNameSearch(input: GetUnitsFromNameSearchInput!): GetUnitsFromNameSearchResult!
  getUploadedAssetVersion: GetUploadedAssetVersionResult!
  getUser(input: GetUserInput!): GetUserResult!
  getVersionsForAsset(input: GetVersionsForAssetInput!): GetVersionsForAssetResult!
  getVocabulary(input: GetVocabularyInput!): GetVocabularyResult!
  getVocabularyEntries(input: GetVocabularyEntriesInput!): GetVocabularyEntriesResult!
  getVoyagerParams(input: GetVoyagerParamsInput!): GetVoyagerParamsResult!
  getWorkflow(input: GetWorkflowInput!): GetWorkflowResult!
  getWorkflowList(input: GetWorkflowListInput!): GetWorkflowListResult!
  searchIngestionSubjects(input: SearchIngestionSubjectsInput!): SearchIngestionSubjectsResult!
}

type ReferenceModel {
  action: ReferenceModelAction!
  boundingBoxP1X: Float
  boundingBoxP1Y: Float
  boundingBoxP1Z: Float
  boundingBoxP2X: Float
  boundingBoxP2Y: Float
  boundingBoxP2Z: Float
  fileSize: BigInt!
  idSystemObject: Int!
  name: String!
  quality: String!
  resolution: Int
  usage: String!
}

enum ReferenceModelAction {
  Ingest
  Update
}

type RelatedObject {
  idSystemObject: Int!
  identifier: String
  name: String!
  objectType: Int!
}

input RelatedObjectInput {
  idSystemObject: Int!
  identifier: String
  name: String!
  objectType: Int!
}

enum RelatedObjectType {
  Derived
  Source
}

type RepositoryPath {
  idSystemObject: Int!
  name: String!
  objectType: Int!
}

input RollbackAssetVersionInput {
  idAssetVersion: Int!
  rollbackNotes: String!
}

type RollbackAssetVersionResult {
  message: String
  success: Boolean!
}

input RollbackSystemObjectVersionInput {
  idSystemObjectVersion: Int!
  rollbackNotes: String!
  time: String!
}

type RollbackSystemObjectVersionResult {
  message: String
  success: Boolean!
}

type Scene {
  ApprovedForPublication: Boolean!
  AssetThumbnail: Asset
  CanBeQCd: Boolean
  CountCamera: Int
  CountLight: Int
  CountMeta: Int
  CountModel: Int
  CountNode: Int
  CountScene: Int
  CountSetup: Int
  CountTour: Int
  EdanUUID: String
  ModelSceneXref: [ModelSceneXref]
  Name: String!
  PosedAndQCd: Boolean!
  SystemObject: SystemObject
  idAssetThumbnail: Int
  idScene: Int!
}

type SceneConstellation {
  ModelSceneXref: [ModelSceneXref]
  Scene: Scene
  SvxNonModelAssets: [SvxNonModelAsset!]
}

type SceneDetailFields {
  Annotation: Int
  ApprovedForPublication: Boolean
  AssetType: Int
  CanBeQCd: Boolean
  CountCamera: Int
  CountLight: Int
  CountMeta: Int
  CountModel: Int
  CountNode: Int
  CountScene: Int
  CountSetup: Int
  CountTour: Int
  EdanUUID: String
  Links: [String!]!
  PosedAndQCd: Boolean
  PublicationApprover: String
  Tours: Int
  idScene: Int
}

input SceneDetailFieldsInput {
  Annotation: Int
  ApprovedForPublication: Boolean
  AssetType: Int
  PosedAndQCd: Boolean
  Tours: Int
}

input SearchIngestionSubjectsInput {
  EdanOnly: Boolean
  query: String!
}

type SearchIngestionSubjectsResult {
  SubjectUnitIdentifier: [SubjectUnitIdentifier!]!
}

type SourceObjectIdentifier {
  idSystemObject: Int!
  identifier: String
}

type Stakeholder {
  EmailAddress: String
  IndividualName: String!
  MailingAddress: String
  OrganizationName: String!
  PhoneNumberMobile: String
  PhoneNumberOffice: String
  SystemObject: SystemObject
  idStakeholder: Int!
}

type StakeholderDetailFields {
  EmailAddress: String
  MailingAddress: String
  OrganizationName: String
  PhoneNumberMobile: String
  PhoneNumberOffice: String
}

input StakeholderDetailFieldsInput {
  EmailAddress: String
  MailingAddress: String
  OrganizationName: String
  PhoneNumberMobile: String
  PhoneNumberOffice: String
}

type Subject {
  AssetThumbnail: Asset
  GeoLocation: GeoLocation
  IdentifierPreferred: Identifier
  Item: [Item]
  Name: String!
  SystemObject: SystemObject
  Unit: Unit
  idAssetThumbnail: Int
  idGeoLocation: Int
  idIdentifierPreferred: Int
  idSubject: Int!
  idUnit: Int!
}

type SubjectDetailFields {
  Altitude: Float
  Latitude: Float
  Longitude: Float
  R0: Float
  R1: Float
  R2: Float
  R3: Float
  TS0: Float
  TS1: Float
  TS2: Float
  idIdentifierPreferred: Int
}

input SubjectDetailFieldsInput {
  Altitude: Float
  Latitude: Float
  Longitude: Float
  R0: Float
  R1: Float
  R2: Float
  R3: Float
  TS0: Float
  TS1: Float
  TS2: Float
  idIdentifierPreferred: Int
}

type SubjectUnitIdentifier {
  IdentifierCollection: String
  IdentifierPublic: String
  SubjectName: String!
  UnitAbbreviation: String!
  idSubject: Int!
  idSystemObject: Int!
}

type SvxNonModelAsset {
  description: String
  idAssetVersion: Int
  size: Int
  type: String!
  uri: String!
}

type SystemObject {
  AccessContextObject: [AccessContextObject]
  Actor: Actor
  Asset: Asset
  AssetVersion: AssetVersion
  CaptureData: CaptureData
  Identifier: [Identifier]
  IntermediaryFile: IntermediaryFile
  Item: Item
  LicenseAssignment: [LicenseAssignment]
  Metadata: [Metadata]
  Model: Model
  Project: Project
  ProjectDocumentation: ProjectDocumentation
  Retired: Boolean!
  Scene: Scene
  Stakeholder: Stakeholder
  Subject: Subject
  SystemObjectDerived: [SystemObject]
  SystemObjectMaster: [SystemObject]
  SystemObjectVersion: [SystemObjectVersion]
  Unit: Unit
  UserPersonalizationSystemObject: [UserPersonalizationSystemObject]
  Workflow: Workflow
  WorkflowStep: WorkflowStep
  WorkflowStepXref: [WorkflowStep]
  idActor: Int
  idAsset: Int
  idAssetVersion: Int
  idCaptureData: Int
  idIntermediaryFile: Int
  idItem: Int
  idModel: Int
  idProject: Int
  idProjectDocumentation: Int
  idScene: Int
  idStakeholder: Int
  idSubject: Int
  idSystemObject: Int!
  idUnit: Int
  idWorkflow: Int
  idWorkflowStep: Int
}

type SystemObjectVersion {
  Comment: String
  CommentLink: String
  DateCreated: DateTime!
  PublishedState: Int!
  SystemObject: SystemObject
  idSystemObject: Int!
  idSystemObjectVersion: Int!
}

enum USER_STATUS {
  eActive
  eAll
  eInactive
}

type Unit {
  ARKPrefix: String
  Abbreviation: String
  Actor: [Actor]
  Name: String!
  Subject: [Subject]
  SystemObject: SystemObject
  idUnit: Int!
}

type UnitDetailFields {
  ARKPrefix: String
  Abbreviation: String
}

input UnitDetailFieldsInput {
  ARKPrefix: String
  Abbreviation: String
}

type UnitEdan {
  Abbreviation: String!
  Name: String
  Unit: Unit
  idUnit: Int
  idUnitEdan: Int!
}

input UpdateDerivedObjectsInput {
  Derivatives: [ExistingRelationship!]!
  ParentObjectType: Int!
  PreviouslySelected: [ExistingRelationship!]!
  idSystemObject: Int!
}

type UpdateDerivedObjectsResult {
  message: String
  status: String!
  success: Boolean!
}

input UpdateIdentifier {
  id: Int!
  idIdentifier: Int!
  idSystemObject: Int!
  identifier: String!
  identifierType: Int!
  preferred: Boolean
}

input UpdateLicenseInput {
  Description: String!
  Name: String!
  RestrictLevel: Int!
  idLicense: Int!
}

type UpdateModelMetadata {
  creationMethod: Int!
  dateCreated: String!
  modality: Int!
  modelFileType: Int!
  name: String!
  purpose: Int!
  units: Int!
}

input UpdateObjectDetailsDataInput {
  Actor: ActorDetailFieldsInput
  Asset: AssetDetailFieldsInput
  AssetVersion: AssetVersionDetailFieldsInput
  CaptureData: CaptureDataDetailFieldsInput
  Identifiers: [UpdateIdentifier!]
  Item: ItemDetailFieldsInput
  License: Int
  Metadata: [MetadataInput!]
  Model: ModelDetailFieldsInput
  Name: String
  Project: ProjectDetailFieldsInput
  ProjectDocumentation: ProjectDocumentationDetailFieldsInput
  Retired: Boolean
  Scene: SceneDetailFieldsInput
  Stakeholder: StakeholderDetailFieldsInput
  Subject: SubjectDetailFieldsInput
  Subtitle: String
  Unit: UnitDetailFieldsInput
}

input UpdateObjectDetailsInput {
  data: UpdateObjectDetailsDataInput!
  idObject: Int!
  idSystemObject: Int!
  objectType: Int!
}

type UpdateObjectDetailsResult {
  message: String
  success: Boolean!
}

type UpdatePhotogrammetryMetadata {
  backgroundRemovalMethod: Int
  cameraSettingUniform: Boolean!
  clusterGeometryFieldId: Int
  clusterType: Int
  datasetFieldId: Int
  datasetType: Int!
  datasetUse: String!
  dateCaptured: String!
  description: String!
  focusType: Int
  folders: [IngestFolder!]!
  itemArrangementFieldId: Int
  itemPositionFieldId: Int
  itemPositionType: Int
  lightsourceType: Int
  name: String!
}

type UpdateSceneMetadata {
  approvedForPublication: Boolean!
  name: String!
  posedAndQCd: Boolean!
  referenceModels: [ReferenceModel!]
}

input UpdateSourceObjectsInput {
  ChildObjectType: Int!
  PreviouslySelected: [ExistingRelationship!]!
  Sources: [ExistingRelationship!]!
  idSystemObject: Int!
}

type UpdateSourceObjectsResult {
  message: String
  status: String!
  success: Boolean!
}

input UpdateUserInput {
  Active: Boolean!
  EmailAddress: String!
  EmailSettings: Int
  Name: String!
  WorkflowNotificationTime: DateTime!
  idUser: Int!
}

type UpdatedAssetVersionMetadata {
  CaptureDataPhoto: UpdatePhotogrammetryMetadata
  Item: Item
  Model: UpdateModelMetadata
  Scene: UpdateSceneMetadata
  UpdatedObjectName: String!
  idAssetVersion: Int!
}

scalar Upload

type UploadAssetInput {
  file: Upload!
  idAsset: Int
  idSOAttachment: Int
  type: Int!
}

type UploadAssetResult {
  error: String
  idAssetVersions: [Int!]
  status: UploadStatus!
}

enum UploadStatus {
  COMPLETE
  FAILED
  NOAUTH
}

type User {
  AccessPolicy: [AccessPolicy]
  Active: Boolean!
  AssetVersion: [AssetVersion]
  DateActivated: DateTime!
  DateDisabled: DateTime
  EmailAddress: String!
  EmailSettings: Int
  LicenseAssignment: [LicenseAssignment]
  Metadata: [Metadata]
  Name: String!
  SecurityID: String!
  UserPersonalizationSystemObject: [UserPersonalizationSystemObject]
  UserPersonalizationUrl: [UserPersonalizationUrl]
  Workflow: [Workflow]
  WorkflowNotificationTime: DateTime
  WorkflowStep: [WorkflowStep]
  idUser: Int!
}

type UserPersonalizationSystemObject {
  Personalization: String
  SystemObject: SystemObject
  User: User
  idSystemObject: Int!
  idUser: Int!
  idUserPersonalizationSystemObject: Int!
}

type UserPersonalizationUrl {
  Personalization: String!
  URL: String!
  User: User
  idUser: Int!
  idUserPersonalizationUrl: Int!
}

type Vocabulary {
  SortOrder: Int!
  Term: String!
  VocabularySet: VocabularySet
  eVocabID: Int
  idVocabulary: Int!
  idVocabularySet: Int!
}

type VocabularyEntry {
  Vocabulary: [Vocabulary!]!
  eVocabSetID: Int!
}

type VocabularySet {
  Name: String!
  SystemMaintained: Boolean!
  Vocabulary: [Vocabulary]
  idVocabularySet: Int!
}

type Workflow {
  DateInitiated: DateTime!
  DateUpdated: DateTime!
  Parameters: String
  Project: Project
  UserInitiator: User
  VWorkflowType: Vocabulary
  WorkflowStep: [WorkflowStep]
  idProject: Int
  idUserInitiator: Int
  idVWorkflowType: Int!
  idWorkflow: Int!
}

type WorkflowListResult {
  DateLast: DateTime
  DateStart: DateTime
  Error: String
  HyperlinkJob: String
  HyperlinkReport: String
  HyperlinkSet: String
  JobRun: JobRun
  Owner: User
  State: String
  Type: String
  UserInitiator: User
  Workflow: Workflow
  WorkflowReport: WorkflowReport
  WorkflowSet: WorkflowSet
  idJobRun: Int
  idOwner: Int
  idUserInitiator: Int
  idWorkflow: Int!
  idWorkflowReport: Int
  idWorkflowSet: Int
}

type WorkflowReport {
  Data: String!
  MimeType: String!
  Workflow: Workflow
  idWorkflow: Int!
  idWorkflowReport: Int!
}

type WorkflowSet {
  Workflow: [Workflow]
  idWorkflowSet: Int!
}

type WorkflowStep {
  DateCompleted: DateTime
  DateCreated: DateTime!
  JobRun: JobRun
  State: Int!
  User: User
  VWorkflowStepType: Vocabulary
  Workflow: Workflow
  WorkflowStepSystemObjectXref: [WorkflowStepSystemObjectXref]
  idUserOwner: Int!
  idVWorkflowStepType: Int!
  idWorkflow: Int!
  idWorkflowStep: Int!
}

type WorkflowStepSystemObjectXref {
  Input: Boolean!
  SystemObject: SystemObject
  WorkflowStep: WorkflowStep
  idSystemObject: Int!
  idWorkflowStep: Int!
  idWorkflowStepSystemObjectXref: Int!
}